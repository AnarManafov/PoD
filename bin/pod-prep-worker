#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-prep-worker
# * @brief a script, which prepares a worker package - all elements of PoD which need to be uploaded to a worker
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        created by:        Anar Manafov
#                           2010-01-28
#
#        Copyright (c) 2010-2011 GSI, Scientific Computing devision. All rights reserved.
#*************************************************************************/
#
# Usage: pod-prep-worker 
#
# Comment:
#    The worker package is saved to PoD server working directory.
#
#=============================================================================
# ***** vars  *****
#=============================================================================
echo "preparing PoD worker package..."

POD_CFG=$(pod-user-defaults -p)
if [ -z "$POD_CFG" ]; then
   echo "error: can't find PoD user defaults"
   exit 1
fi

eval WRK_DIR=$(pod-user-defaults --key server.work_dir)
eval ARC_NAME=$(pod-user-defaults --wrkpkg)
eval WRK_SCRIPT=$(pod-user-defaults --wrkscript)
eval USER_SCRIPT=$(pod-user-defaults --userenvscript)
WN_BINS="$POD_LOCATION/bin/wn_bins/*"
SERVER_INFO_FILE="$WRK_DIR/etc/server_info.cfg"
XPD_CFG="$WRK_DIR/etc/xpd.cf"

CACHE_DIR="$WRK_DIR/tmp/wpkg_cache"
mkdir -p "$CACHE_DIR"

# check that all needed components are available
COMPONENTS_ETC=( "$XPD_CFG" 
                 "$POD_CFG"
                 "$POD_LOCATION/etc/version"
                 "$SERVER_INFO_FILE" )

COMPONENTS=( "${COMPONENTS_ETC[@]}" )

# add user's script if present
if [ -r "$USER_SCRIPT" ]; then
   echo "select a user defined environment script to be added to worker package..."
   COMPONENTS=( "${COMPONENTS[@]}" "$USER_SCRIPT" )
fi

# add all pre-compiled bins
echo "selecting pre-compiled bins to be added to worker package..."
for i in ${WN_BINS[@]} 
do
   COMPONENTS=( "${COMPONENTS[@]}" "$i" )
done

# check that all components are exists
for i in "${COMPONENTS[@]}"
do
   if [ ! -r "$i" ]; then
      echo "Failed to create the package. There is a missing component: \"$i\"" >&2
      exit 1
   fi
done
#=============================================================================
# ***** is there a need to recreate the package  *****
#=============================================================================
need_update()
{
   local _os=$(uname -s 2>&1)
   local pkg_time=0
   if [ -f $ARC_NAME ]; then
      # the last modified time of <file> as timestamp format
      if [ "$_os" = "Darwin" ]; then
         pkg_time=$(stat -f "%m" -t "%s" "$ARC_NAME") 2>/dev/null         
      else
         pkg_time=$(stat --format='%Z' "$ARC_NAME") 2>/dev/null
      fi
   fi

   for i in "${COMPONENTS[@]}"
   do
      local ts=0
      if [ "$_os" = "Darwin" ]; then
         ts=$(stat -f "%m" -t "%s" "$i") 2>/dev/null
      else
         ts=$(stat --format='%Z' "$i") 2>/dev/null
      fi
 
      if (( $ts > $pkg_time )); then
         # if timestamp is different, than compare to a cached file
         d=$(diff $i "$CACHE_DIR/$(basename $i)" 2>/dev/null)
         if (( 0 != $? )); then
            echo "PoD worker package will be repacked because \"$i\" was updated"
            return 1 
         fi
      fi
   done
   
   return 0
}
#=============================================================================
# ***** MAIN *****
#=============================================================================
need_update
if (( 0 == $? )); then
   echo "PoD worker package is up-to-dat."
   echo "PoD worker package: "$ARC_NAME
   exit 0
else
   rm -rf $ARC_NAME
fi

# create an empty archive first
tar cvf $ARC_NAME --files-from=/dev/null 

# add all default components
for i in "${COMPONENTS[@]}"
do
   if [ -f $i ]; then
      tar --append --file=$ARC_NAME -C $(dirname $i) $(basename $i)
      RET_VAL=$?
      if [ "X$RET_VAL" = "X0" ]; then
         # copy the file to cache
         cp $i $CACHE_DIR/
	 continue
      else
	 echo "failed. Exit code: $RET_VAL" >&2
	 exit 1
      fi
   else
      echo "Error: missing component: $i" >&2
      rm -rf $ARC_NAME
      exit 1
   fi
done


# compress the archive
gzip -9 $ARC_NAME
# remove the .gz suffix
mv "$ARC_NAME.gz" $ARC_NAME
echo "PoD worker package: "$ARC_NAME

# copy worker script to the sandbox directory
cp "$POD_LOCATION/etc/PoDWorker.sh" "$WRK_SCRIPT" || { echo "error: Can't copy the worker script to the sandbox." >&2 ; exit 1; }
chmod u+w "$WRK_SCRIPT"

exit 0

