#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-prep-worker
# * @brief a script, which prepares a worker package - all elements of PoD which need to be uploaded to a worker
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        created by:        Anar Manafov
#                           2010-01-28
#
#        Copyright (c) 2010-2012 GSI, Scientific Computing division. All rights reserved.
#*************************************************************************/
#
# Usage: pod-prep-worker 
#
# Comment:
#    The worker package is saved to PoD server working directory.
#
#=============================================================================
# ***** USAGE *****
#=============================================================================
usage() {
    cat <<EOF
PoD command line utility,  which prepares a worker package - all elements of PoD which need to be uploaded to a worker
   Copyright (C) 2010-2012 GSI, Scientific Computing division.

Usage: $(basename $0) [OPTION]
     -i 			Re-pack user_worker_env.sh (for internal use only).
     -h          		Show summary of options.

Report bugs to http://pod.gsi.de
EOF
}
#=============================================================================
# ***** OPTARG *****
#=============================================================================
REPACK_WRK_PKG=""
while getopts ":ih" opt; do
  case $opt in
  i)
    REPACK_WRK_PKG="YES"
    ;;
  h) 
    usage
    exit 0
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  esac
done
#=============================================================================
# ***** vars  *****
#=============================================================================
TOOL_NAME="$(basename $0)"

PRIVATE_TOOLS="$POD_LOCATION/bin/private"

echo "preparing PoD worker package..."
POD_CFG=$(pod-user-defaults -p)
if [ -z "$POD_CFG" ]; then
   echo "error: can't find PoD user defaults"
   exit 1
fi

eval WRK_DIR=$(pod-user-defaults --key server.work_dir)
eval ARC_NAME=$(pod-user-defaults --wrkpkg)
eval WRK_SCRIPT=$(pod-user-defaults --wrkscript)
eval USER_SCRIPT=$(pod-user-defaults --userenvscript)
eval INLINEBASH_SCRIPT="$(dirname $(pod-user-defaults --wrkscript))/user_worker_env.sh"
WN_BINS="$POD_LOCATION/bin/wn_bins/*"
SERVER_INFO_FILE="$WRK_DIR/etc/server_info.cfg"
XPD_CFG="$WRK_DIR/etc/xpd.cf"

CACHE_DIR="$WRK_DIR/tmp/wpkg_cache"
mkdir -p "$CACHE_DIR"

# check that all needed components are available
COMPONENTS_ETC=( "$XPD_CFG" 
                 "$POD_CFG"
                 "$POD_LOCATION/etc/version"
                 "$SERVER_INFO_FILE" )

COMPONENTS=( "${COMPONENTS_ETC[@]}" )
#=============================================================================
# ***** clean_up *****
#=============================================================================
clean_up()
{
  rm -f $ARC_NAME $ARC_NAME.tar $ARC_NAME.tgz
  rm -f $WRK_SCRIPT
  # don't remove inline script if internal re-pack is called
  if [ -z "$REPACK_WRK_PKG" ]; then
     rm -f $INLINEBASH_SCRIPT
  fi
}

##------------- re-pack inline BASH script
#if [ -n "$REPACK_WRK_PKG" ]; then
#   echo "$TOOL_NAME: it was requested to repack worker package"
#   WRK_PKG_DIR=$(dirname $ARC_NAME)
   
#   pushd $(pwd) &> /dev/null
#   cd $WRK_PKG_DIR
#   gzip -d -c pod-worker > pod-worker.tar
#   if (( $? != 0 )) ; then
#      echo "$TOOL_NAME: error: failed to repack worker package. The package is broken. Please restart pod-server."
#      exit 1
#   fi
#   tar -uf pod-worker.tar user_worker_env.sh
#   if (( $? != 0 )) ; then
#      echo "$TOOL_NAME: error: failed to update worker package."
#      exit 1
#   fi
#   gzip -9 -c pod-worker.tar > pod-worker
#   popd
#   exit 0
#fi
#-------------------------------------------------

# clean before create
clean_up

# prefer inline shell script over user environment script
if [ -r "$INLINEBASH_SCRIPT" ]; then # inline bash script (SSH plug-in)
   echo "inline shell script is found and will be added to the package..."
   COMPONENTS=( "${COMPONENTS[@]}" "$INLINEBASH_SCRIPT" )
elif [ -r "$USER_SCRIPT" ]; then # add user's script if present
   echo "select user defined environment script to be added to worker package..."
   COMPONENTS=( "${COMPONENTS[@]}" "$USER_SCRIPT" )
fi

# add all pre-compiled bins
echo "selecting pre-compiled bins to be added to worker package..."
for i in ${WN_BINS[@]} 
do
   COMPONENTS=( "${COMPONENTS[@]}" "$i" )
done

# check that all components are exists
for i in "${COMPONENTS[@]}"
do
   if [ ! -r "$i" ]; then
      echo "Failed to create the package. There is a missing component: \"$i\"" >&2
      exit 1
   fi
done
#=============================================================================
# ***** is there a need to recreate the package  *****
#=============================================================================
need_update()
{
   # TODO: rewrite this algorithms using checksums
   ##
     return 1
   ##
   ##
   if [ -n "$REPACK_WRK_PKG" ]; then
      echo "$TOOL_NAME: it was requested to repack worker package"
      return 1
   fi

   local _os=$(uname -s 2>&1)
   local pkg_time=0
   if [ -f $ARC_NAME ]; then
      # the last modified time of <file> as timestamp format
      if [ "$_os" = "Darwin" ]; then
         pkg_time=$(stat -f "%m" -t "%s" "$ARC_NAME") 2>/dev/null         
      else
         pkg_time=$(stat --format='%Z' "$ARC_NAME") 2>/dev/null
      fi
   fi

   for i in "${COMPONENTS[@]}"
   do
      local ts=0
      if [ "$_os" = "Darwin" ]; then
         ts=$(stat -f "%m" -t "%s" "$i") 2>/dev/null
      else
         ts=$(stat --format='%Z' "$i") 2>/dev/null
      fi
 
      if (( $ts > $pkg_time )); then
         # if timestamp is different, than compare to a cached file
         d=$(diff $i "$CACHE_DIR/$(basename $i)" 2>/dev/null)
         if (( 0 != $? )); then
            echo "PoD worker package will be repacked because \"$i\" was updated"
            return 1 
         fi
      fi
   done
   
   return 0
}
#=============================================================================
# ***** MAIN *****
#=============================================================================
need_update
if (( 0 == $? )); then
   echo "PoD worker package is up-to-dat."
   echo "PoD worker package: "$ARC_NAME
   exit 0
else
   clean_up
fi

# create an empty archive first
tar cvf $ARC_NAME --files-from=/dev/null 

# add all default components
for i in "${COMPONENTS[@]}"
do
   if [ -f $i ]; then
      tar --append --file=$ARC_NAME -C $(dirname $i) $(basename $i)
      RET_VAL=$?
      if [ "X$RET_VAL" = "X0" ]; then
         # copy the file to cache
         # TODO: revise the algorithm of the cache using md5
         cp $i $CACHE_DIR/
         chmod u+w "$CACHE_DIR/$(basename $i)"
	 continue
      else
	 echo "failed. Exit code: $RET_VAL" >&2
	 exit 1
      fi
   else
      echo "Error: missing component: $i" >&2
      clean_up
      exit 1
   fi
done


# compress the archive
gzip -9 $ARC_NAME
# remove the .gz suffix
mv "$ARC_NAME.gz" $ARC_NAME

# add payload to the wrk script
$PRIVATE_TOOLS/pod-addpayload --binary $ARC_NAME "$POD_LOCATION/etc/PoDWorker.sh.in" "$WRK_DIR/etc/PoDWorker.sh"
if (( 0 != $? )); then
   echo "$TOOL_NAME: error: failed to add payload to the wrk script."
   return 1 
fi

# update WN submit timestampt
regexpr_wn_submit_time="s/\(export[[:space:]]*POD_WN_SUBMIT_TIMESTAMP=\)[0-9]*/\1$(date +%s)/g"
sed -e "$regexpr_wn_submit_time" "$WRK_DIR/etc/PoDWorker.sh" > "$WRK_DIR/etc/PoDWorker.sh.temp"
mv "$WRK_DIR/etc/PoDWorker.sh.temp" "$WRK_DIR/etc/PoDWorker.sh" 

# copy worker script to the sandbox directory
cp "$WRK_DIR/etc/PoDWorker.sh" "$WRK_SCRIPT" || { echo "error: Can't copy the worker script to the sandbox." >&2 ; exit 1; }
chmod u+wx "$WRK_SCRIPT"

echo "PoD worker package: "$WRK_SCRIPT

# remove artifacts
rm -f $ARC_NAME $ARC_NAME.tar $ARC_NAME.tgz

exit 0

