#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-server
# * @brief a script, which manages PoD's server
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        version number:    $LastChangedRevision$
#        created by:        Anar Manafov
#                           2007-05-15
#        last changed by:   $LastChangedBy$ $LastChangedDate$
#
#        Copyright (c) 2007-2010 GSI, Scientific Computing devision. All rights reserved.
#*************************************************************************/
#
# Usage:
#      pod-server start|stop|status
#

#######
XPROOF_PORTS_RANGE_MIN=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.xproof_ports_range_min)
XPROOF_PORTS_RANGE_MAX=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.xproof_ports_range_max)
PROOFAGENT_PORTS_RANGE_MIN=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.agent_ports_range_min)
PROOFAGENT_PORTS_RANGE_MAX=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.agent_ports_range_max)
eval WORK_DIR=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.work_dir)
#######
# a number of seconds we wait until xpd is started 
XPD_START_TIMEOUT=3

SERVER_HOST_NAME=$(hostname -f)

# getting the version of PoD
PKG_VERSION=$(cat $POD_LOCATION/etc/version) 

# ************************************************************************
# ***** detects ports for XPROOFD and for the PoD Agent  *****
server_status()
{
# get a pid of our xpd. We get any xpd running by $UID
    XPD_PID=$(ps -w -u$UID -o pid,args | awk '{print $1" "$2}' | grep xproofd | grep -v grep | awk '{print $1}')
    AGENT_PID=$(ps -w -u$UID -o pid,args | awk '{print $1" "$2}' | grep pod-agent | grep -v grep | awk '{print $1}')
    
    if [ -z "$XPD_PID" -a  -z "$AGENT_PID" ]; then
	echo "PoD server is NOT running"
	return 1
    fi  
    
    # change a string separator
    O=$IFS IFS=$'\n' NETSTAT_RET=($(netstat -n --program --listening -t 2>/dev/null | egrep "xproofd|pod-agent")) IFS=$O;
 
    # look for ports of the server
    for(( i = 0; i < ${#NETSTAT_RET[@]}; ++i ))
    do
	port=$(echo ${NETSTAT_RET[$i]} | awk '{print $4}' | sed 's/^.*://g')
	if [ -n "$port" ]; then
	    if (( ($port >= $XPROOF_PORTS_RANGE_MIN) && ($port <= $XPROOF_PORTS_RANGE_MAX) )); then
		XPROOF_PORT=$port
	    elif (( ($port >= $PROOFAGENT_PORTS_RANGE_MIN) && ($port <= $PROOFAGENT_PORTS_RANGE_MAX) )); then
		POD_AGENT_PORT=$port
	    fi
	fi
    done

    if [ -n  "$XPD_PID" ]; then
	echo "XPROOFD [$XPD_PID] port: "$XPROOF_PORT
    else
	echo "WARNING: XPROOFD is NOT running."
    fi
    if [ -n  "$AGENT_PID" ]; then
	echo "PoD agent [$AGENT_PID] port: "$POD_AGENT_PORT
    else
	echo "WARNING: PoD agent is NOT running."
    fi

    if [ -n  "$XPD_PID" ]; then
	echo "PROOF connection string: "$SERVER_HOST_NAME:$XPROOF_PORT
    fi    

    return 0
}
# ************************************************************************
# ***** returns a free port from a given range  *****
get_freeport()
{
    for(( i = $1; i < $2; ++i ))
    do
       netstat -ant 2>/dev/null | grep ":$i" | egrep -i "listen|time_wait" &>/dev/null || { echo $i; exit 0; }
    done

    echo "Error: Cant find free socket port"
    exit 1
}
# ************************************************************************
# ***** returns a free port from a given range  *****
# takes two parameters, pod agent server host name and port number
create_agent_server_info_file()
{
    SERVERINFO_FILE="$POD_LOCATION/etc/server_info.cfg"
    echo "[server]" > $SERVERINFO_FILE
    echo "host=$1" >> $SERVERINFO_FILE
    echo "port=$2" >> $SERVERINFO_FILE
}
# ************************************************************************
# ***** Get pre-compiled bins for WNs  *****
get_bins()
{
   WN_BIN_DIR="$POD_LOCATION/bin/wn_bins"
   # we hard-code a list of supported architectures
   FILE_ARCH=("x86" "amd64")
   # check that bins dir exists and contain all supported bins
   if [ -d "$WN_BIN_DIR" ]; then
      for index in 0 1
      do
         FILE_NAME="pod-wrk-bin-$PKG_VERSION-Linux-${FILE_ARCH[index]}.tar.gz"
         if [ ! -r $FILE_NAME]; then
            NEED_DOWNLOAD="TRUE"
         fi
      done
   fi

   if [ -z $NEED_DOWNLOAD]; then
      return 0
   fi
  
   echo "WNs pre-compiled binaries are missing."
   echo "Downloading WNs pre-compiled binaries..."
  
   POD_URL=" http://pod.gsi.de/releases/add"
   OPT[0]=" -q -O- " # wget options
   CMD[0]="wget"
   OPT[1]=" -s -O" # curl options
   CMD[1]="curl"
   # check for wget or curl commands
   for index in 0 1
   do
        ${CMD[index]} --version > /dev/null 2>&1
        ret=$?
        if [ ! $ret = 0 ] ; then
            continue
        fi
	CMD_URL="${CMD[index]}${OPT[index]}"
   done

   if [ -z "${CMD_URL}" ]; then
      echo "${UTIL_NAME} error: Can't find neither wget, nor curl commands. At least one of these commands must be installed on the system."
      exit 1
   fi

   pushd $(pwd)
   mkdir -p $WN_BIN_DIR
   cd $WN_BIN_DIR
   # download all pre-compiled bins
   for index in 0 1
   do
     FILE_NAME="pod-wrk-bin-$PKG_VERSION-Linux-${FILE_ARCH[index]}.tar.gz"
     $CMD_URL ${POD_URL}/$PKG_VERSION/$FILE_NAME
   done
   popd
}

# ************************************************************************
# ***** START  *****
start() 
{
    # S T O P I N G the server first
    stop $1

    # S T A R T I N G the server
    echo "Starting PoD server..."
    # proof.conf must be presented before xproofd is started
    touch $POD_PROOFCFG_FILE

    NEW_XPROOF_PORT=$(get_freeport $XPROOF_PORTS_RANGE_MIN $XPROOF_PORTS_RANGE_MAX)
    NEW_PROOFAGENT_PORT=$(get_freeport $PROOFAGENT_PORTS_RANGE_MIN $PROOFAGENT_PORTS_RANGE_MAX)
    echo "trying to use XPROOFD port: "$NEW_XPROOF_PORT
    echo "trying to use PoD agent port: "$NEW_PROOFAGENT_PORT

    # updating XPD configuration file
    echo "updating xproofd configuration file..."
    regexp_xpd_port="s/\(xpd.port[[:space:]]*\)[0-9]*/\1$NEW_XPROOF_PORT/g"
    regexp_server_host="s/\(if[[:space:]]\).*\([[:space:]]#SERVERHOST DONT EDIT THIS LINE\)/\1$SERVER_HOST_NAME\2/g"
    sed -e "$regexp_xpd_port" -e "$regexp_xproof_port" -e "$regexp_server_host" $POD_LOCATION/etc/xpd.cf > $POD_LOCATION/etc/xpd.cf.temp
    mv $POD_LOCATION/etc/xpd.cf.temp $POD_LOCATION/etc/xpd.cf

    # generate a helper header
    # this helps to keep track of PROOF master's host and port for user's scripts
    HEADER_HELPER="$POD_LOCATION/etc/pod-master.h"
    echo "#ifndef _POD_MASTER_H_" > $HEADER_HELPER
    echo "#define _POD_MASTER_H_" >> $HEADER_HELPER
    echo "#define POD_LOCATION \"$POD_LOCATION\"" >> $HEADER_HELPER
    echo "#define POD_MASTER_HOST \"$SERVER_HOST_NAME\"" >> $HEADER_HELPER
    echo "#define POD_XPROOF_PORT \"$NEW_XPROOF_PORT\"" >> $HEADER_HELPER
    echo "#endif" >> $HEADER_HELPER

    # Start XPROOFD
    ####
    echo "starting xproofd..."
    xproofd -n PoDServer -c $POD_LOCATION/etc/xpd.cf -b -l $POD_LOCATION/log/xpd.log
    XPD_RET_VAL=$?
    if [ "X$XPD_RET_VAL" != "X0" ]; then
       return 1
    fi

    sleep $XPD_START_TIMEOUT # let XPD to start
	
    # setting a port to listen for pod-agent server and server's host name
    ####
    echo "creating PoD agent info file..."
    create_agent_server_info_file $SERVER_HOST_NAME $NEW_PROOFAGENT_PORT

    # Start pod-agent
    ####
    echo "starting PoD agent..."
    $POD_LOCATION/bin/pod-agent -d -m server -c $POD_LOCATION/etc/PoD.cfg --start

    # Prepare the worker package
    ####
    $POD_LOCATION/bin/pod-prep-worker

    return 0
}
# ************************************************************************
# ***** pkill  *****
# we need this function since Mac OS X doesn't provide pkill yet
my_pkill()
{
   for X in `ps cx | grep -i $1 | awk {'print $1'}`; do
      kill -9 $X;
   done
}

# ************************************************************************
# ***** STOP  *****
stop()
{
    echo "Stopping PoD server..."

    #TODO: make it less aggressive    
    my_pkill xproofd
    my_pkill proofserv

    $POD_LOCATION/bin/pod-agent -d -c $POD_LOCATION/etc/PoD.cfg --stop
    
    return 0
}
# ************************************************************************
# ***** STATUS  *****
status()
{
    server_status
    
    # check that ROOTSYS is set
    if [ -z $ROOTSYS ]; then
       echo ""
       echo 'WARNING: $ROOTSYS is not set.'
    fi
}


# ************************************************************************
# ***** MAIN  *****
# checking the number of parameters
if [ $# -ne 1 ]; then
    echo "Usage: pod-server start|stop|status"
    exit 1
fi

# work_dir must be a valid dir
if [ ! -e "$WORK_DIR" ]; then
    echo "error: working director: \"$WORK_DIR\" doesn't exist!"
    exit 1
fi

# star|stop|status
case "$1" in
    start)
        get_bins	
	start $WORK_DIR
	RETVAL=$?
	;;
    stop)
	stop $WORK_DIR
	RETVAL=$?
	;;
    status)
	status $WORK_DIR
	;;
esac

exit $RETVAL

