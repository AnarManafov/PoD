#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-server
# * @brief a script, which manages PoD's server
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        version number:    $LastChangedRevision$
#        created by:        Anar Manafov
#                           2007-05-15
#        last changed by:   $LastChangedBy$ $LastChangedDate$
#
#        Copyright (c) 2007-2010 GSI, Scientific Computing devision. All rights reserved.
#*************************************************************************/
#
# Usage:
#      pod-server start|stop|status|getbins
#
# Supported OS:
#    Linux, Mac OS X (tested on 10.6)
#
# 
# Notes:
#    On start the script checks whether WNs pre-compiled bins are present, if not, it will down load them.
#    Users could provide own version of the pre-compiled bins and avoid of downloading of them.
# 
#
#######
POD_CFG=$(pod-user-defaults -p)
if [ -z "$POD_CFG" ]; then
   echo "error: can't find PoD user defaults"
   exit 1
fi
#######
XPROOF_PORTS_RANGE_MIN=$(pod-user-defaults --key server.xproof_ports_range_min)
XPROOF_PORTS_RANGE_MAX=$(pod-user-defaults --key server.xproof_ports_range_max)
PROOFagent_portS_RANGE_MIN=$(pod-user-defaults --key server.agent_ports_range_min)
PROOFagent_portS_RANGE_MAX=$(pod-user-defaults --key server.agent_ports_range_max)
WORK_DIR=$(pod-user-defaults -V --key server.work_dir)
if (( $? != 0 )) ; then
   echo "ERROR: Your PoD user defaults can't be used with this version of PoD."
   echo "If you want to continue to use this version of PoD, you have the following options:"
   echo "1. Fix your configuration file."
   echo "2. Recreate the file using: pod-user-defaults -f -d -c \"$(pod-user-defaults -p)\""
   exit 1
fi
eval WORK_DIR="$WORK_DIR"
eval XPD_CFG="$WORK_DIR/etc/xpd.cf"
eval POD_SRV_LOGDIR=$(pod-user-defaults --key server.logfile_dir)
eval SERVERINFO_FILE="$WORK_DIR/etc/server_info.cfg"
eval POD_PROOFCFG_FILE="$WORK_DIR/proof.conf"
eval POD_agent_pid="$WORK_DIR/pod-agent.pid"
# used by xpd.cf
export POD_PROOFCFG_FILE
#######

SERVER_OS=$(uname -s 2>&1)

# getting the version of PoD
PKG_VERSION=$(cat $POD_LOCATION/etc/version)

# default location for WNs' pre-compiled binaries
POD_URL=" http://pod.gsi.de/releases/add"

# ************************************************************************
# ***** detects pid and port of XPROOFD *****
# ************************************************************************
xproofd_info()
{
   # find xproofd pid file
   adminpath=$(cat ~/.PoD/etc/xpd.cf | grep "server.adminpath" | awk '{print $3}')
   adminpath="$adminpath/PoDServer/"
   if [ ! -d "$adminpath" ]; then
      return 1
   fi
   xpd_port=$(ls -a "$adminpath" | grep xproofd | awk -F. '{print $3}')
   xpd_pid=$(cat "$adminpath/.xproofd.$xpd_port/xrootd.pid" 2>/dev/null)
   if [ -n "$xpd_pid" ]; then
      kill -0 $xpd_pid &>/dev/null
      if (( $? != 0 )) ; then
         xpd_pid=""
      fi
   fi
}
# ************************************************************************
# ***** detects pid and port of PoD agent *****
# ************************************************************************
pod_agent_info()
{
   if [ ! -r "$SERVERINFO_FILE" ]; then
      return 1
   fi
   agent_port=$(cat "$SERVERINFO_FILE" | grep "port" | awk -F= '{print $2}')
   agent_host=$(cat "$SERVERINFO_FILE" | grep "host" | awk -F= '{print $2}')
   agent_pid=$(cat "$POD_agent_pid" 2>/dev/null)
   if [ -n "$agent_pid" ]; then
      kill -0 $agent_pid &>/dev/null
      if (( $? != 0 )) ; then
         agent_pid=""
      fi
   fi
}
# ************************************************************************
# ***** detects ports for XPROOFD and for the PoD Agent  *****
# ************************************************************************
server_status()
{
# get a pid of our xpd. We get any xpd running by $UID
    xproofd_info
    pod_agent_info
    
    if [ -z "$xpd_pid" -a  -z "$agent_pid" ]; then
       echo "PoD server is NOT running"
       return 1
    fi  
    
    if [ -n  "$xpd_pid" ]; then
       echo "XPROOFD [$xpd_pid] port: "$xpd_port
    else
       echo "WARNING: XPROOFD is NOT running."
    fi
    if [ -n  "$agent_pid" ]; then
       echo "PoD agent [$agent_pid] port: "$agent_port
    else
       echo "WARNING: PoD agent is NOT running."
    fi

    if [ -n  "$xpd_pid" ]; then
       echo "PROOF connection string: "$agent_host:$xpd_port
    fi    

    return 0
}
# ************************************************************************
# ***** returns a free port from a given range  *****
# ************************************************************************
get_freeport()
{
    for(( i = $1; i < $2; ++i ))
    do
       if [ "$SERVER_OS" = "Darwin" ]; then
          netstat -an -p tcp 2>/dev/null | grep ".$i " | egrep -i "listen|time_wait" &>/dev/null || { echo $i; exit 0; }
       else
          netstat -ant 2>/dev/null | grep ":$i " | egrep -i "listen|time_wait" &>/dev/null || { echo $i; exit 0; }
       fi 
    done

    echo "Error: Cant find a free socket port in the given range: $1 - $2"
    exit 1
}
# ************************************************************************
# ***** Get pre-compiled bins for WNs  *****
# ************************************************************************
get_bins()
{
   WN_BIN_DIR="$POD_LOCATION/bin/wn_bins"
   # we hard-code a list of supported architectures
   FILE_ARCH=("x86" "amd64")
   # check that bins dir exists and contain all supported bins
   if [ -d "$WN_BIN_DIR" ]; then
      for index in 0 1
      do
         FILE_NAME="pod-wrk-bin-$PKG_VERSION-Linux-${FILE_ARCH[index]}.tar.gz"
         if [ ! -r "$WN_BIN_DIR/$FILE_NAME" ]; then
            NEED_DOWNLOAD="TRUE"
         fi
      done
   else
      NEED_DOWNLOAD="TRUE"
   fi

   if [ -z "$NEED_DOWNLOAD" ]; then
      return 0
   fi
  
   echo "WNs pre-compiled binaries are missing."
   echo "Downloading WNs pre-compiled binaries..."
  
   OPT[0]=" --fail -s -O" # curl options
   CMD[0]="curl"
   OPT[1]=" -q " # wget options
   CMD[1]="wget"
   # check for wget or curl commands
   for index in 0 1
   do
      ${CMD[index]} --version > /dev/null 2>&1
      if (( $? != 0 )) ; then
         continue
      fi
      CMD_URL="${CMD[index]}${OPT[index]}"
   done

   if [ -z "${CMD_URL}" ]; then
      echo "${UTIL_NAME} error: Can't find neither wget, nor curl commands. At least one of these commands must be available."
      exit 1
   fi

   pushd $(pwd) &> /dev/null
   mkdir -p $WN_BIN_DIR || { echo "error: Can't create $WN_BIN_DIR. Check permissions."; exit 1; }
   cd $WN_BIN_DIR || { echo "error: Can't change to $WN_BIN_DIR. Check permissions."; exit 1; }
   # download all pre-compiled bins
   for index in 0 1
   do
      FILE_NAME="pod-wrk-bin-$PKG_VERSION-Linux-${FILE_ARCH[index]}.tar.gz"
      $CMD_URL ${POD_URL}/$PKG_VERSION/$FILE_NAME
      if (( $? != 0 )); then
         echo "Error: Can't download pre-compiled binaries for WNs."
         echo "Please check availability of ${POD_URL}/$PKG_VERSION/$FILE_NAME"
         exit 1
      fi
   done
   popd &> /dev/null
}
#=============================================================================
# ***** create_dir  *****
#=============================================================================
create_dir()
{
   if [ ! -d "$1" ]; then
      mkdir -p "$1"
   fi
}
# ************************************************************************
# ***** create_dir_hierarchy *****
# ************************************************************************
create_dir_hierarchy()
{
   create_dir "$WORK_DIR/etc"
   create_dir "$WORK_DIR/wrk"
   create_dir "$POD_SRV_LOGDIR"
}
# ************************************************************************
# ***** create_helper_header *****
# ************************************************************************
create_helper_header()
{
    # generate a helper header
    # this helps to keep track of PROOF master's host and port for user's scripts
    HEADER_HELPER="$WORK_DIR/etc/pod-master.h"
    echo "#ifndef _POD_MASTER_H_" > $HEADER_HELPER
    echo "#define _POD_MASTER_H_" >> $HEADER_HELPER
    echo "#define POD_LOCATION \"$POD_LOCATION\"" >> $HEADER_HELPER
    echo "#define POD_MASTER_HOST \"$agent_host\"" >> $HEADER_HELPER
    echo "#define POD_XPROOF_PORT \"$xpd_port\"" >> $HEADER_HELPER
    echo "#endif" >> $HEADER_HELPER
}
# ************************************************************************
# ***** update_xpd_cfg  *****
# ************************************************************************
update_xpd_cfg()
{
    # make a local version of xpd config file for the first time
    if [ ! -r "$XPD_CFG" ]; then
       cp $POD_LOCATION/etc/xpd.cf.in $XPD_CFG
       _TMP_DIR=$(mktemp -d /tmp/PoD_XXXXXXXXXX)
       chmod 777 $_TMP_DIR
       eval sed -i.bup 's%_POD_TMP_DIR%$_TMP_DIR%g' $XPD_CFG 
    fi

    NEW_XPROOF_PORT=$(get_freeport $XPROOF_PORTS_RANGE_MIN $XPROOF_PORTS_RANGE_MAX)
    regexp_xpd_port="s/\(xpd.port[[:space:]]*\)[0-9]*/\1$NEW_XPROOF_PORT/g"
    regexp_server_host="s/\(if[[:space:]]\).*\([[:space:]]#SERVERHOST DONT EDIT THIS LINE\)/\1$agent_host\2/g"
    sed -e "$regexp_xpd_port" -e "$regexp_xproof_port" -e "$regexp_server_host" $XPD_CFG > "$XPD_CFG.temp"
    mv -f "$XPD_CFG.temp" $XPD_CFG
}
# ************************************************************************
# ***** START  *****
# ************************************************************************
start() 
{
    # S T O P I N G the server first
    stop $1

    # S T A R T I N G the server
    echo "Starting PoD server..."
    # proof.conf must be presented before xproofd is started
    touch $POD_PROOFCFG_FILE

    # updating XPD configuration file
    echo "updating xproofd configuration file..."
    update_xpd_cfg

    # Start XPROOFD
    ####
    echo "starting xproofd..."
    xproofd -c $XPD_CFG -b -l $POD_SRV_LOGDIR/xpd.log -n PoDServer
    if (( $? != 0 )); then
       return 1
    fi

    # wait for xproofd to start
    WAIT_TIME=5
    cnt=0
    while true; do
       xproofd_info
       if [ -n "$xpd_pid" ]; then
          break;
       fi
       cnt=$(expr $cnt + 1)
       if [ $cnt -gt $WAIT_TIME ]; then
          echo "WARNING: Can't detect whether xproofd has started or not..."
          break;
       fi
    done
	
    # Start pod-agent
    ####
    echo "starting PoD agent..."
    $POD_LOCATION/bin/pod-agent -d -m server -c "$POD_CFG" --serverinfo "$SERVERINFO_FILE" --start

    # Prepare the worker package
    ####
    $POD_LOCATION/bin/pod-prep-worker
    if (( $? != 0 )); then
       echo "Error: Can't start PoD server. Please check pod-agent.server.log and xpd.log for more information."
       return 1
    fi

    # show status
    echo "------------------------"
    status
    echo "------------------------"

    # generate a helper header
    create_helper_header

    return 0
}
# ************************************************************************
# ***** STOP *****
# ************************************************************************
wait_and_kill()
{
    # if after 10 sec. a given process still exists send a non-ignorable kill
    WAIT_TIME=10
    cnt=0
    while $(kill -0 $1 &>/dev/null); do
       cnt=$(expr $cnt + 1)
       if [ $cnt -gt $WAIT_TIME ]; then
          echo "Process \"$1\" doesn't want to stop. Forcing a non-ignorable kill..."
          kill -9 $1
          break
       fi
       sleep 1
    done
}
# ************************************************************************
# ***** STOP *****
# ************************************************************************
stop()
{
    xproofd_info
    pod_agent_info
    if [ -z "$xpd_pid" -a  -z "$agent_pid" ]; then
       return 0
    fi

    echo "Stopping PoD server..."

    # kill all proofserv, which are children of our xproofd.
    # PROOF sometime can't properly clean them and it could give us
    # some problem next time we start PROOF session
    for i in `ps -ef| awk '$3 == '$xpd_pid' { print $2 }'`
    do
      echo "killing proofserv: $i"
      kill -9 $i &>/dev/null
    done

    # Try to stop the server by first sending a TERM signal
    # And if after 10 sec. it still exists send a non-ignorable kill
    echo "Gracefully shut down xproofd ($xpd_pid) and pod-agent ($agent_pid)..."
    kill $agent_pid $xpd_pid &>/dev/null

    wait_and_kill $agent_pid
    wait_and_kill $xpd_pid
   
    return 0
}
# ************************************************************************
# ***** STATUS *****
# ************************************************************************
status()
{
    server_status
    
    # check that ROOTSYS is set
    if [ -z $ROOTSYS ]; then
       echo ""
       echo 'WARNING: $ROOTSYS is not set.'
    fi
}
# ************************************************************************
# ***** MAIN  *****
# ************************************************************************

# create work dir hierarchy
create_dir_hierarchy

# work_dir must be a valid dir
if [ ! -e "$WORK_DIR" ]; then
    echo "error: working director: \"$WORK_DIR\" doesn't exist!"
    exit 1
fi

# star|stop|status|getbins
case "$1" in
    start)
        get_bins	
	start $WORK_DIR
	RETVAL=$?
	;;
    stop)
	stop $WORK_DIR
	RETVAL=$?
	;;
    status)
	status $WORK_DIR
	;;
    getbins)
        get_bins
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|getbins}"
        exit 1
esac

exit $RETVAL

