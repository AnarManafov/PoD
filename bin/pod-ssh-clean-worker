#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-ssh-clean-worker
# * @brief 
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        created by:        Anar Manafov
#                           2010-06-10
#
#        Copyright (c) 2010 GSI, Scientific Computing group. All rights reserved.
#*************************************************************************/
#
#=============================================================================
# ***** USAGE *****
#=============================================================================
usage() {
    cat <<EOF
PoD command line utility, which is used to clean a PoD worker via ssh. It's used by pod-ssh utility.
   Copyright (C) 2010 GSI, Scientific Computing group.

Usage: pod-info [OPTION]
     -i id			ID of the worker.
     -l ssh login@host.fqdn 	SSH connection string.
     -w dir      		Remote working directory.
     -o SSH_Opt			Additinal SSH parameters.
     -c arg			Start a remote cleanning (internal argument).
     -h          		Show summary of options.

Report bugs to http://pod.gsi.de
EOF
}
#=============================================================================
# ***** OPTARG *****
#=============================================================================
WORKER_ID=""
SSH_CON_STR=""
RDIR=""
SSHOPT=""
CLEAN=""
while getopts ":i:l:w:o:c:h" opt; do
  case $opt in
  i)
    WORKER_ID="$OPTARG"
    ;;
  l)
    SSH_CON_STR="$OPTARG"
    ;;
  w) 
    RDIR="$OPTARG"
    ;;
  o)
    SSHOPT="$OPTARG"
    ;;
  c)
    CLEAN="$OPTARG"
    ;;
  h) 
    usage
    exit 0
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  esac
done

if [ -z "$SSH_CON_STR" ]; then
   usage
   exit 1
fi
#=============================================================================
# ***** VARS *****
#=============================================================================
TOOL_NAME="pod-ssh-clean-worker"
WRK_PID=PoDWorker.pid
TIMEOUT=30

SSH_CMD="ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=$TIMEOUT -o PasswordAuthentication=no -q $SSH_CON_STR $SSHOPT"
SCP_CMD="scp -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=$TIMEOUT -o PasswordAuthentication=no $SSHOPT"
WAITTIMEOUT=10
#=============================================================================
# ***** POD-SSH NAMED PIPE *****
#=============================================================================
if [ "$CLEAN" != "clean" ]; then
   # a pod-ssh communication pipe (log engine)
   pipe="$POD_LOCATION/.ssh_plugin_pipe"
   if [[ ! -p $pipe ]]; then
       echo "$TOOL_NAME error: pod-ssh log engine is not running"
       exit 1
   fi
fi
#=============================================================================
# ***** LOG *****
#=============================================================================
# function read input from stdin and write output to the stdout
# caller must take care about where come stdin and where go stdout
logMsgPipe() 
{
  while read data
  do
      logMsg "$data" 
  done
}

logMsg()
{
# date format
#RFC-2822:
# *    www, dd mmm yyyy hh:mm:ss +zzzz
#
# Don't use date -R since it's a GNU specific implementation (doesn't work on Mac, for example)
    echo -e "$WORKER_ID\t[$(date '+%a, %d %b %Y %T %z')]\t$1" > $pipe
}
#=============================================================================
# ***** RETRIEVE REMOTE LOG FILES *****
#=============================================================================
get_log_files()
{
   eval LOG_DIR=$(pod-user-defaults -c $POD_LOCATION/etc/PoD.cfg --key server.logfile_dir)

   # create a local log dir. for this worker
   DT=$(date "+%Y_%m_%d_%H_%M_%S")
   LOG_DIR="$LOG_DIR/$WORKER_ID/$DT"
   mkdir -p $LOG_DIR

   # proof_log.tgz, pod-agent.client.log, ssh_worker.log
   $SCP_CMD $SSH_CON_STR:"$RDIR/proof_log.tgz $RDIR/pod-agent.client.log $RDIR/ssh_worker.log" $LOG_DIR/  2>&1 | logMsgPipe
   if [ $? -ne 0 ]; then
      logMsg "$TOOL_NAME error: failed to send workers cleaning script $SELF_PATH"
      exit 1
   fi
}
#=============================================================================
# ***** remote part *****
#=============================================================================
# a special case, executed on the remote host
# check for pid file of worker's script.
# If the file is available, read pid from it and send a TERM signal using that pid.
# If the file is unavailable, exit with 0 - it is not an error for us.
if [ "$CLEAN" = "clean" ]; then
    pid_file="$RDIR/$WRK_PID"
    
    if [  -e $pid_file ]; then
	pid=$(cat $pid_file)
	kill -15 $pid
	cnt=0
	while $(kill -0 $pid &>/dev/null); do
	   cnt=$(expr $cnt + 1)
	   if [ $cnt -gt $WAITTIMEOUT ]; then
	      echo "$TOOL_NAME error: failed to wait for pid $pid"
	      exit 1
	   fi
	   sleep 1
	done
    fi

    exit 0
fi
#=============================================================================
# ***** local part *****
#=============================================================================
# this part is executed locally
logMsg "$TOOL_NAME is started for $SSH_CON_STR (dir: $RDIR, sshopt: $SSHOPT)"
SELF_PATH=$(readlink -f $0)

$SSH_CMD "test -d $RDIR" 2>&1 | logMsgPipe
if [ $? -ne 0 ]; then
   logMsg "$TOOL_NAME: There is nothing to clean."
   exit 0
fi

$SCP_CMD $SELF_PATH $SSH_CON_STR:$RDIR/ 2>&1 | logMsgPipe
if [ $? -ne 0 ]; then
    logMsg "$TOOL_NAME error: failed to send worker's cleaning script $SELF_PATH"
    exit 1
fi

logMsg "$TOOL_NAME: Executing the cleaner on the remote host..."
$SSH_CMD "$RDIR/$TOOL_NAME -l $SSH_CON_STR -c clean -w $RDIR" 2>&1 | logMsgPipe
if [ $? -ne 0 ]; then
   logMsg "$TOOL_NAME warning: failed to retrieve remote log files."
fi

logMsg "$TOOL_NAME: retrieving worker's log files..."
get_log_files


logMsg "$TOOL_NAME: Removing the remote working dir..."
# remove the working directory
$SSH_CMD "rm -rf $RDIR" 2>&1 | logMsgPipe
if [ $? -ne 0 ]; then
    logMsg "$TOOL_NAME error: failed to remove the remote working dir: $RDIR"
    exit 1
fi

logMsg "$TOOL_NAME: Done cleaning!"

exit 0

