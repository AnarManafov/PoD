#!/usr/bin/env bash
#/************************************************************************/
#/**
# * @file pod-ssh-status-worker
# * @brief 
# * @author Anar Manafov A.Manafov@gsi.de
# *//*
#
#        created by:        Anar Manafov
#                           2010-09-15
#
#        Copyright (c) 2010 GSI, Scientific Computing devision. All rights reserved.
#*************************************************************************/
#
#=============================================================================
# ***** USAGE *****
#=============================================================================
usage() {
    cat <<EOF
PoD command line utility, which is used to retrieve a status of a PoD worker via ssh. It's used by pod-ssh utility.
   Copyright (C) 2010 GSI, Scientific Computing group.

Usage: pod-info [OPTION]
     -i id			ID of the worker.
     -l ssh login@host.fqdn 	SSH connection string.
     -w dir      		Remote working directory.
     -o SSH_Opt			Additinal SSH parameters.
     -h          		Show summary of options.

Report bugs to http://pod.gsi.de
EOF
}
#=============================================================================
# ***** OPTARG *****
#=============================================================================
WORKER_ID=""
SSH_CON_STR=""
RDIR=""
SSHOPT=""
while getopts ":i:l:w:o:c:h" opt; do
  case $opt in
  i)
    WORKER_ID="$OPTARG"
    ;;
  l)
    SSH_CON_STR="$OPTARG"
    ;;
  w) 
    RDIR="$OPTARG"
    ;;
  o)
    SSHOPT="$OPTARG"
    ;;
  h) 
    usage
    exit 0
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  esac
done

if [ -z "$SSH_CON_STR" ]; then
   usage
   exit 1
fi
#=============================================================================
# ***** VARS *****
#=============================================================================
TOOL_NAME="pod-ssh-status-worker"
WRK_PID=PoDWorker.pid
TIMEOUT=10

SSH_CMD="ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=$TIMEOUT -o PasswordAuthentication=no -q $SSH_CON_STR $SSHOPT"
#=============================================================================
# ***** POD-SSH NAMED PIPE *****
#=============================================================================
# a pod-ssh communication pipe (log engine)
eval pipe_dir=$(pod-user-defaults --key server.work_dir)
pipe="$pipe_dir/.pod_ssh_pipe"
if [[ ! -p $pipe ]]; then
   echo "$TOOL_NAME error: pod-ssh log engine is not running"
   exit 1
fi
#=============================================================================
# ***** LOG *****
#=============================================================================
# function read input from stdin and write output to the stdout
# caller must take care about where come stdin and where go stdout
logMsgPipe() 
{
  while read data
  do
      logMsg "$data" 
  done
}

logMsg()
{
# date format
#RFC-2822:
# *    www, dd mmm yyyy hh:mm:ss +zzzz
#
# Don't use date -R since it's a GNU specific implementation (doesn't work on Mac, for example)
    echo -e "$WORKER_ID\t[$(date '+%a, %d %b %Y %T %z')]\t$1" > $pipe
}
#=============================================================================
# ***** local part *****
#=============================================================================
# this part is executed locally
logMsg "$TOOL_NAME is started for $SSH_CON_STR (dir: $RDIR, sshopt: $SSHOPT)"

$SSH_CMD "test -d $RDIR" 2>&1 | logMsgPipe
if [ ${PIPESTATUS[0]} -ne 0 ]; then
   logMsg "Worker status: CLEAN"
   exit 0
fi


pid_file="$RDIR/$WRK_PID"

$SSH_CMD "test -r $pid_file && exit 4 || exit 5" 2>&1 | logMsgPipe

ret=${PIPESTATUS[0]}
if (( $ret == 1 )); then
   logMsg "Failed to check."
   exit 0
fi

if (( $ret == 5 )); then
   logMsg "Worker status: DONE"
   exit 0
elif (( $ret == 4 )); then
   logMsg "Worker status: RUN"
   exit 0
fi

logMsg "Worker status: UNKNOWN"
exit 0

