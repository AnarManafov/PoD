#! /bin/bash
##/************************************************************************/
##/*! \file install
##  *//*
##
##         version number:     $LastChangedRevision$
##         created by:         Anar Manafov
##                             2008-02-06
##         last changed by:    $LastChangedBy$ $LastChangedDate$
##
##         Copyright (c) 2008-2009 GSI GridTeam. All rights reserved.
##*************************************************************************/
#
# Arguments:
# 
#  -c : process the configuration only (recomented for GSI's binary installation) 
#  -b : process full build
#  -h : show the help message
#
#

VERSION=2.1.0b

###
############ Vars ######################
# Users may change these variables
###
INSTALL_PATH=`pwd`


XRD_EXPORT_DIR=$INSTALL_PATH/test

# pod-user-defaults app
pod_user_defaults_PKG=pod-user-defaults-1.0.0b-Source
pod_user_defaults_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly
pod_user_defaults_OPTIONS="-DCMAKE_INSTALL_PREFIX=$INSTALL_PATH"
# pod-agent app
pod_agent_PKG=pod-agent-2.1.0b-Source
pod_agent_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly
pod_agent_OPTIONS="-DCMAKE_INSTALL_PREFIX=$INSTALL_PATH"
# pod-console app
pod_console_PKG=pod-console-1.1.0b-Source
pod_console_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly
pod_console_OPTIONS="-DCMAKE_INSTALL_PREFIX=$INSTALL_PATH"
# gLite API wrapper (needed to PoD gLite plug-in)
GAW_PKG=glite-api-wrapper-3.2.0
GAW_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Stable/PoD
GAW_OPTIONS="--prefix=$INSTALL_PATH --enable-tests=no"

# only for gLite plug-in
#export GLITE_LOCATION=
export XERCESC_LOCATION=$GLITE_LOCATION/../external/opt/xerces-c
export CLASSADS_LOCATION=$GLITE_LOCATION/../classads
export BOOST_LOCATION=$GLITE_LOCATION/../external/usr/
export GRIDSITE_INSTALL_PATH=$GLITE_LOCATION/../external/usr/


APP_PATH=$INSTALL_PATH/app
TMP_PATH=$APP_PATH/tmp
########################################


###
############ Funstions ##################
###
printHelp()
{
    echo "PoD intallation script arguments:"
    echo "    -c : process the configuration only (recomented for GSI's binary installation" 
    echo "    -b : process full build and configuration"
    echo "    -h : show the help message"
}

CreateCFG()
{
    echo "---> INFO: Creating default cfg files..."
# generating ./PoD_env.sh
    cp -f template/PoD_env.sh.template ./PoD_env.sh
    eval sed -i 's%_G_WRK_DIR%$INSTALL_PATH%g' ./PoD_env.sh
    
# Using eval to force variable substitution
# changing _G_MASTER_HOSTNAME to a host name (FQDN) of the xrootd master:
    MASTER_HOST=`hostname -f`
# generating etc/xpd.cf
    cp -f template/xpd.cf.template etc/xpd.cf
    # populating the tmp dir.
    _TMP_DIR=`mktemp -d /tmp/PoD_XXXXXXXXXX`
    eval sed -i 's%_G_SERVER_TMP_DIR%$_TMP_DIR%g' etc/xpd.cf
    eval sed -i 's%_G_XRD_EXPORT_DIR%$XRD_EXPORT_DIR%g' etc/xpd.cf
    
# generating etc/Job.lsf
    cp -f template/Job.lsf.template etc/Job.lsf
    eval sed -i 's%_G_WRK_DIR%$INSTALL_PATH%g' etc/Job.lsf
    
# generate test/simple_test0.C
    cp -f template/simple_test0.C.template test/simple_test0.C
    eval sed -i 's%_G_XRD_EXPORT_DIR%$XRD_EXPORT_DIR%g' test/simple_test0.C    
    
# linking datafile for tests
    ln -s $INSTALL_PATH/test/dstarmb.root $INSTALL_PATH/test/dstarmb1.root
# creating a log dir
    mkdir -p log
    
    return 0
}

_GetModule() #parameters: $1 - package name; $2 - URL
{
    wget --tries=2 --directory-prefix=$TMP_PATH $2/$1.tar.gz  || return 1
    tar -C $APP_PATH -xzf $TMP_PATH/$1.tar.gz || return 1
}

InstallGAW()
{
    _GetModule $GAW_PKG $GAW_LINK
    
    pushd $APP_PATH/$GAW_PKG || return 1
    ./configure $GAW_OPTIONS || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
    
    # source GAW's config - other modules need it
    GAW_ENV=$INSTALL_PATH/bin/gaw_env.sh
    if [ -e $GAW_ENV ]; then
	echo "Sourcing GAW's env.: "$GAW_ENV
    	. $GAW_ENV
    else
	# TODO: msg me!
	return 1
    fi
    
    echo
    echo "---> INFO: GAW has been installed."
    return 0
}

Install_pod_user_defaults()
{
    _GetModule $pod_user_defaults_PKG $pod_user_defaults_LINK

    pushd $APP_PATH/$pod_user_defaults_PKG || return 1
    cmake $pod_user_defaults_OPTIONS -C BuildSetup.cmake . || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd

    echo
    echo "---> INFO: pod-user-defaults has been installed."
    return 0
}

Install_pod_agent()
{
    _GetModule $pod_agent_PKG $pod_agent_LINK
    
    pushd $APP_PATH/$pod_agent_PKG || return 1
    cmake $pod_agent_OPTIONS -C BuildSetup.cmake . || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
    
    echo
    echo "---> INFO: pod-agent has been installed."
    return 0
}

Install_pod_console()
{
    _GetModule $pod_console_PKG $pod_console_LINK
    
    pushd  $APP_PATH/$pod_console_PKG || return 1
    cmake $pod_console_OPTIONS -C BuildSetup.cmake . || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
    
    echo
    echo "---> INFO: pod-console has been installed."
    return 0
}

InstallApps()
{
    mkdir -p $TMP_PATH

    InstallGAW
    GAW_RET_VAL=$?
    echo
    echo
    if [ "X$GAW_RET_VAL" != "X0" ]; then
	echo "---> WARNING: Can't install gLite API Wrapper (GAW) library."
	echo "---> WARNING: Do you want to use gLite plug-in?"
	echo "---> WARNING: Without GAW there can be no gLite plug-in for pod-console installed."
	echo "---> WARNING: Please fix GAW configuration options (in the install script) and resolve missing dependencies, if you still want to use gLite plug-in for pod-console."
	echo
	echo "Press any key to continue, or Ctrl+C to abort..."
	read -s -n 1	
    fi
    
    Install_pod_agent || return 1
    Install_pod_console || return 1
    
    return 0
}



#
# Reading scripts arguments
#
# Script invoked with no command-line args?
NO_ARGS=0 
if [ $# -eq "$NO_ARGS" ]; then
    printHelp;
    exit 65
fi

CONFIGURE=""
FULL_BUILD=""
SHOW_HELP=""
while getopts "hcb" Options
  do
  case $Options in
      h ) 
	  printHelp 
	  exit 0;;
      c ) CONFIGURE="1" ;;
      b ) FULL_BUILD="1" ;;
      * ) 
	  printHelp
	  exit;
  esac
done

if [ $CONFIGURE ] && [ $FULL_BUILD ]; then
    echo "options -c and -b must not be used together";
    exit 65
fi


####### Main
echo "--------------------"
echo "PROOF on Demand v."$VERSION
echo "--------------------"
echo


#
# Building modules
#
if [ $FULL_BUILD ]; then
    
# The very first step is to install pod-user-defaults app
    Install_pod_user_defaults
    if [ "X$?" != "X0" ]; then
	echo "---> ERROR: pod-user-defaults can't be installed. Please check its build output for error messages."
	exit 1;
    fi
    

    InstallApps
    
    RET_VAL=$?
    echo
    echo
    if [ "X$RET_VAL" = "X0" ]; then
	echo "---> INFO: All PoD modules have been successfully installed."
    else
	echo "---> ERROR: Failed to install PoD modules."
    fi
    
    if [[ -d $TMP_PATH ]]; then
	echo "---> INFO: deleting temporary files..."
	rm -rf $TMP_PATH
    fi
    
    if [ "X$RET_VAL" != "X0" ]; then
	exit 1;
    fi
fi
#
# Configuring
#
if [ $CONFIGURE ] || [ $FULL_BUILD ]; then
    CreateCFG || { echo "---> Error: can't create cfg files."; exit 1; }  
fi

echo "Installation successfully done."

exit 0
