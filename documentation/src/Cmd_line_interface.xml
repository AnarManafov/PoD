<!--
 Command-line interface
 -->
<chapter id="Cmd_line_interface">
    <title>Command-line interface</title>
    <chapterinfo>
    </chapterinfo>

    <!-- ......................................................................... -->
    <!-- pod-server -->
    <!-- ......................................................................... -->
    
    
    <refentry id="pod-server">
        <refentryinfo>
            <title>pod-server</title>
            <date>2010-01-31</date>
            <productname>pod-server vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-server</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-server</refname>
            <refpurpose>Manages PoD server</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-server</command>
                <group choice="req">
                    <arg>start</arg>
                    <arg>restart</arg>
                    <arg>stop</arg>
                    <arg>status</arg>
                    <arg>status_with_code</arg>
                    <arg>getbins</arg>
                </group>
            </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                Using this command users can start/stop/restart PoD server and force to download pre-compiled PoD WN binaries from the central PoD repository.
                PoD server currently works with two daemons, namely xproofd and pod-agent.
                <para>
                When the <option>status</option> argument is used, <command>pod-server</command> will show running processes including their process IDs
                and used TCP ports. For user convenience the <command>pod-server</command> command with
                the <option>status</option> option prints also a PROOF connection string (master_host:xproofd_port),
                which can be used as an argument to <literal>TProof::Open</literal> in PROOF analysis scripts. However it is recommended to use <xref linkend="pod-info"/>
                in order to retrieve the current connection string.
                </para>
            </para>
        </refsect1>
        <refsect1>
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>start</option></term>
                    <listitem>
                        <para>Start PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>restart</option></term>
                    <listitem>
                        <para>Restart PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>stop</option></term>
                    <listitem>
                        <para>Stop PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>status</option></term>
                    <listitem>
                        <para>Request the status information. It will show which processes are running, under which PIDs and which TCP ports are used.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>status_with_code</option></term>
                    <listitem>
                        <para>This option is exactly the same as <option>status</option>.
                            The only difference is that when the option is used the <command>pod-server</command>
                            utility exits 0 if PoD server is running, and >0 if it doesn't.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>getbins</option></term>
                    <listitem>
                        <para>Force PoD server to download workers pre-compiled binaries from the PoD repository.
                            The binaries than saved to <filename class="directory">$POD_LOCATION/bin/wn_bins</filename> directory.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-info -->
    <!-- ......................................................................... -->
    
    <refentry id="pod-info">
        <refentryinfo>
            <title>pod-info</title>
            <date>2011-01-25</date>
            <productname>pod-info vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-info</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-info</refname>
            <refpurpose>Shows information about PoD and PROOF workers.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-info</command>
                <arg choice="plain"><synopfragmentref linkend="general">general options
                </synopfragmentref></arg>
                <arg choice="plain"><synopfragmentref linkend="information">information options
                </synopfragmentref></arg>
                <arg choice="plain"><synopfragmentref linkend="connection">connection options
                </synopfragmentref></arg>
            </cmdsynopsis>
            <sbr/>
            <synopfragment id="general">
                <arg><option>-h, --help</option></arg>
                <arg><option>-v, --version</option></arg>
                <arg><option>-d, --debug</option></arg>
                <arg><option>-b, --batch</option></arg>
            </synopfragment>
            <sbr/>
            <synopfragment id="information">
                <group>
                    <arg><option>-c, --connection_string</option></arg>
                    <arg><option>-l, --list</option></arg>
                    <arg><option>-n, --number</option></arg>
                    <arg><option>-s, --status</option></arg>
                    <arg><option>--xpdPid</option></arg>
                    <arg><option>--xpdPort</option></arg>
                    <arg><option>--agentPid</option></arg>
                    <arg><option>--agentPort</option></arg>
                </group>
            </synopfragment>
            <sbr/>
            <synopfragment id="connection">
                <arg><option>--remote <replaceable>arg</replaceable></option></arg>
                <arg><option>--remote_path <replaceable>arg</replaceable></option></arg>
                <arg><option>--ssh_opt <replaceable>arg</replaceable></option></arg>
                <arg><option>--ssh_open_domain <replaceable>arg</replaceable></option></arg>
            </synopfragment>
            
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                One can use <command>pod-info</command> to retrieve different kinds of information about and from PoD.
                For example <command>pod-info</command> could help to find out whether PoD server running or not, how many PROOF workers are already online and
                which exactly. Please see <xref linkend="pod-info_options"/> to find out all kinds of information <command>pod-info</command> can retrieve and show.
            </para>
            <para>
            By default <command>pod-info</command> tries to find and connect to a local PoD server.
            A PoD server considered to be a local one if the <command>pod-info</command> and the PoD server run under the same user id.
            It could be the same machine or different machines but with a shared home file system.
            If none of local PoD servers are detected, <command>pod-info</command> will check for any PoD server managed by the <xref linkend="pod-remote"/> command
            and will connect to the server if found.
            </para>
	    <para>
            When you want to retrieve information about remote PoD servers, than you need to use the <option>--remote</option> option.
            Using this option you can specify an ssh connection string, where a remote PoD server is running.
            The <command>pod-info</command> command will first try to find the running PoD server on that host and than process user requests
            on that server.
            In <xref linkend="pod-info_examples"/> you will find some use cases.
            </para>
            <para>
                The <command>pod-info</command> utility exits 0 on success, and >0 if an error occurs.
            </para>
        </refsect1>
        <refsect1 id="pod-info_options">
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>-h, --help</option></term>
                    <listitem>
                        <para>Produce help message.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-v, --version</option></term>
                    <listitem>
                        <para>Version information.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-d, --debug</option></term>
                    <listitem>
                        <para>Show debug messages. This option enables a debug mode and helps in some cases to understand what is going wrong.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-b, --batch</option></term>
                    <listitem>
                        <para>Enable the batch mode. For example, in case when the <option>--remote</option> option also used, than there will
                         be no password prompts or any interaction with a user. The utility will try to use SSH public key authentication and will fail if it's not working.</para>
                        <para>
                         The batch mode is very useful, when <command>pod-info</command> is used in a ROOT/PROOF script to retrieve a connection string
                         (see <xref linkend="pod-info_connection_string"/>).
                         In this case you want <command>pod-info</command> to return either a PROOF connection string or an empty string
                         in case of an error and no prompts of any kind.
		        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-c, --connection_string</option></term>
                    <listitem>
                        <para>Show a PROOF connection string, which could be passed to the TProof::Open method as an argument (see <xref linkend="pod-info_connection_string"/>).</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-l, --list</option></term>
                    <listitem>
                        <para>List all available PROOF workers.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-n, --number</option></term>
                    <listitem>
                        <para>Report a number of currently available PROOF workers.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-s, --status</option></term>
                    <listitem>
                        <para>Show PoD server status.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--remote <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>A connection string in form of user@host.fqdn. Directs <command>pod-info</command> to use SSH to detect and connect to a remote PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--remote_path <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>A working directory of the remote PoD server. It is very important either to write an explicit
                              path or use quotes, so that shell will not substitute local variable in the remote path. (default: ~/.PoD/)</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--ssh_opt <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>If needed, users can provide additional SSH options,
                              which will be used by <command>pod-info</command> in all SSH communications.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--ssh_open_domain <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <note><para>
                             The <option>--ssh_open_domain</option> is in development. So far <command>pod-info</command> can only work with remote PoD servers
                             which are at least directly accessible via SSH.
                        </para></note>
                        <para> The name of a third party machine open to the outside world and from which direct
                               connections to the server are possible.
                               The optional argument, can be used when PoD server machine is not directly accessible from outside via SSH.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
        <refsect1 id="pod-info_examples"><title>Examples</title>

<example><title>PoD version information</title>
<para>
<screen>
<command>pod-info <replaceable>-v</replaceable></command>
</screen>
           Get PoD version from a remote PoD server on the machine <replaceable>server.fqdn</replaceable>
           (it could be also on a shared home file system there):
<screen>
<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-v</option></command>
</screen>
	   </para>
</example>

<example><title>available PROOF workers</title>
<para>
a number of workers:
<screen>
<command>pod-info <option>-n</option></command>
</screen>
the same from the remote PoD server:
<screen>
<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-n</option></command>
</screen>
a list of workers:
<screen>
<command>pod-info <option>-l</option></command>
</screen>
or all together:
<screen>
<command>pod-info <option>-nl</option></command>
</screen>
</para>
</example>


<example id="pod-info_connection_string"><title>PROOF connection string</title>
<para>
<screen>
<command>pod-info <option>-c</option></command>
</screen>
the same from the remote PoD server:
<screen>
<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-c</option></command>
</screen>
or if the remote server has a non-default working folder:
<screen>
<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>--remote_path <replaceable>"~/pod/work_dir/"</replaceable></option> <option>-c</option></command>
</screen>


use this command in a ROOT script or your analysis code directly:
<programlisting>
TProof::Open(gSystem->GetFromPipe("<command>pod-info <option>-c</option></command>"));
</programlisting>

with a remote PoD server:
<programlisting>
TProof::Open(gSystem->GetFromPipe("<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-c</option> <option>-b</option></command>"));
</programlisting>
note, that we use the <option>-b</option> option, because we can't have any prompt in out ROOT script and
therefore the call to <command>pod-info</command> must be silent. Since it will return an empty string in case of failure, users may want to check:
<programlisting>
std::string url(gSystem->GetFromPipe("<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-c</option> <option>-b</option></command>"));
if( url.empty() )
{
   // PoD server is not running
   // print out an error message...
   return 1;
}
TProof::Open( url.c_str() );
</programlisting>
</para>
</example>

<example><title>PoD server status</title>
<para>
<screen>
<command>pod-info <option>-s</option></command>
</screen>
the same from the remote PoD server:
<screen>
<command>pod-info <option>--remote <replaceable>user@server.fqdn</replaceable></option> <option>-s</option></command>
</screen>
</para>
</example>
        </refsect1>

    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-user-defaults -->
    <!-- ......................................................................... -->
    
    <refentry id="pod-user-defaults">
        <refentryinfo>
            <title>pod-user-defaults</title>
            <date>2010-01-31</date>
            <productname>pod-user-defaults vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-user-defaults</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-user-defaults</refname>
            <refpurpose>Retrieves values from PoD user defaults configuration file.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-user-defaults</command>
                <arg><option>-h, --help</option></arg>
                <arg><option>-v, --version</option></arg>
                <arg><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></arg>
                <arg><option>--key=<replaceable>name</replaceable></option></arg>
            </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                The <command>pod-user-defaults</command> command can be used to retrieve values from the PoD user defaults configuration file for any given keys.
                The PoD user defaults configuration "<filename>PoD.cfg</filename>" is a general PoD settings file, where user can tune PoD for a specific environment.
                The file usually can be found in <filename class="directory"><envar>$HOME</envar>/.PoD/etc</filename> or in <filename class="directory"><envar>$POD_LOCATION</envar>/etc</filename>.
            </para>
        </refsect1>
        <refsect1>
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>-h, --help</option></term>
                    <listitem>
                        <para>Show summary of options.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-v, --version</option></term>
                    <listitem>
                        <para>Version information.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></term>
                    <listitem>
                        <para>PoD user-defaults configuration file.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--key=<replaceable>name</replaceable></option></term>
                    <listitem>
                        <para>The <command>pod-user-defaults</command> retrieves a value for the given key. A key must be specified with a its section name
                            (separated by a dot), for example to find out a working directory on the PoD server, request the value for the following key: "server.wrk_dir".
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-prep-worker -->
    <!-- ......................................................................... -->
    
    <refentry id="pod-prep-worker">
        <refentryinfo>
            <title>pod-prep-worker</title>
            <date>2010-01-31</date>
            <productname>pod-prep-worker vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-prep-worker</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-prep-worker</refname>
            <refpurpose>Prepares a worker package - all elements of PoD which need to be uploaded to a worker node.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-prep-worker</command>
            </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                The <command>pod-prep-worker</command> command creates a tar-zipped archive of all files which are required on PoD worker. The command prepares a
                PoD worker package. This package and the <command>PoDWorker.sh</command> job script are all what is required to start a PoD worker.
            </para>
            <para>
                The <command>pod-prep-worker</command> command must be issued on the PoD server machine and only when PoD server is up an running.
                Otherwise the package will be not created.
            </para>
        </refsect1>
    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-submit -->
    <!-- ......................................................................... -->
    
    <refentry id="pod_submit">
        <refentryinfo>
            <title>pod-submit</title>
            <date>2010-01-31</date>
            <productname>pod-submit vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-submit</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-submit</refname>
            <refpurpose>Submits PoD jobs using a defined resource management system.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-submit</command>
                <arg><option>-h</option></arg>
                <arg><option>-l</option></arg>
                <arg><option>-r <replaceable>condor|ge|loadleveler|lsf|pbs</replaceable></option></arg>
                <arg><option>-q <replaceable>queue</replaceable></option></arg>
                <arg><option>-n <replaceable>X</replaceable></option></arg>
            </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                Use this command to manually submit PoD workers to a defined resource management system.
                The command currently supports:
                <itemizedlist>
                    <listitem><para>LSF (Load Sharing Facility),</para></listitem>
                    <listitem><para>PBS Pro/OpenPBS/Torque (Portable Batch System),</para></listitem>
                    <listitem><para>Grid Engine (Oracle/Sun Grid Engine),</para></listitem>
                    <listitem><para>Condor,</para></listitem>
                    <listitem><para>LoadLeveler (IBM Tivoli Workload Scheduler LoadLeveler).</para></listitem>
                </itemizedlist>
            </para>
            <para>
            Use <command>pod-submit <option>-l</option></command> to find out the
            list of available and supported CLI plug-ins.
            <note><para>
                The pod-submit can't be used to submit SSH jobs.
                In order to use PoD SSH plug-in, please check the
                <xref linkend="pod-ssh"/> reference manual.
            </para></note>
            </para>
            <para>
                The <envar>$POD_RMS_DEFAULT_QUEUE</envar> environment variable can be used to define a default RMS queue.
                If no "-q" option is provided to "pod-submit", then the value of this variable is used.
            </para>
            <para>
                The <command>pod-submit</command> utility exits 0 on success, and >0 if an error occurs.
            </para>
        </refsect1>
        <refsect1>
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>-h</option></term>
                    <listitem>
                        <para>Show summary of options and exit.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-l</option></term>
                    <listitem>
                        <para>Show all available RMS plug-ins.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-r <replaceable>condor|ge|loadleveler|lsf|pbs</replaceable></option></term>
                    <listitem>
                        <para>A name of the resource management system to use.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-q <replaceable>queue</replaceable></option></term>
                    <listitem>
                        <para>Submit the jobs to specified <option>queue</option>. (default: "proof" if the value of <envar>$POD_RMS_DEFAULT_QUEUE</envar> is empty )</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-n <replaceable>X</replaceable></option></term>
                    <listitem>
                        <para>Specify a desired number or PROOF workers, where the <option>X</option> option defines the number of workers. (default: 10)</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-ssh -->
    <!-- ......................................................................... -->
    
    <refentry id="pod-ssh">
        <refentryinfo>
            <title>pod-ssh</title>
            <date>2010-09-08</date>
            <productname>pod-ssh vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-ssh</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-ssh</refname>
            <refpurpose>Submits, retrieves statuses and cleans PoD workers using SSH connections.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-ssh</command>
                <arg><option>-h, --help</option></arg>
                <arg><option>-v, --version</option></arg>
                <arg><option>-d, --debug</option></arg>
                <arg><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></arg>
                <arg><option>-e <replaceable>arg</replaceable>, --exec=<replaceable>arg</replaceable></option></arg>
                <arg><option>-t <replaceable>arg</replaceable>, --threads=<replaceable>arg</replaceable></option></arg>
                <group choice="req">
                    <arg>--submit</arg>
                    <arg>--clean</arg>
                    <arg>--status</arg>
                </group>
                <arg><option>--logs</option></arg>
            </cmdsynopsis>
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                The <command>pod-ssh</command> command can be used to submit and clean PoD workers using an ssh connection.
            </para>
            <important><para>
                The current implementation requires users to have a public key access (password less) to destination remote hosts (worker nodes).
            </para></important>
            <para>
                The <command>pod-ssh</command> command takes PoD's ssh plug-in configuration file as input.
                The configuration file is a comma-separated values (CSV) file.
                Fields are normally separated by commas. If you want to put a comma in a field, you need to put quotes around it. Also 3 escape sequences are supported.
            </para>
            <para>
                <table id="POD_SSH_CFG_TABLE">
                    <title>PoD's ssh plug-in configuration fields</title>
                    <tgroup cols="5">
                        <thead>
                            <row>
                                <entry>1</entry>
                                <entry>2</entry>
                                <entry>3</entry>
                                <entry>4</entry>
                                <entry>5</entry>
                            </row>
                        </thead>
                        <tbody>		
                            <row>
                                <entry>id (must be any unique string).
                                <para>This id string is used just to distinguish different PoD workers in SSH plug-in.</para></entry>
                                <entry>a host name with or without a login, in a form: login@host.fqdn</entry>
                                <entry>additional SSH params (could be empty)</entry>
                                <entry>a remote working directory</entry>
                                <entry>a desired number of PROOF workers (could be empty).
                                       <para>If this parameter is empty,
                                       than PoD will spawn as many PROOF workers on that host as CPU cores.</para></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                
                An example of a configuration file:
<screen>
r1, anar@lxg0527.gsi.de, -p24, /tmp/test, 4
# this is a comment
r2, user@lxi001.gsi.de,,/home/user/pod,16
125, user2@host, , /tmp/test,
</screen>
            </para>
            <para>
                The <command>pod-ssh</command> command remembers last entered config-file pathname and next time you want to use <command>pod-ssh</command> with
                the same config file, you can just call <command>pod-ssh</command> without providing the <option>--config</option> option.
                The command will always use the latest given setting.
            </para>
            <sect2 id="pod-ssh_ENV_WNS"><title>Environment on Worker Nodes</title>
                <para>
                        With SSH plug-in it is very often the case, that PoD can't start workers, because xproofd/ROOT is not in the PATH on worker nodes.
                        This could happen since with a batch SSH login in some systems you don't get your /etc/profile script called
                        (login script) and there is no environment variables, like for normal login users.
                        If your PoD job fails, just after submission it shows DONE status.
                        You may want to check the remote log files see <xref linkend="pod-ssh_examples"/>
                        from the worker nodes and if it says that there are problems to start xproofd, then you need to customize environment on WNs.
                        To solve this issue, users either can specify the full path to desired ROOT version on the worker nodes
                        in the <filename>PoD.cfg</filename>, in case when all WNs have the same version pf ROOT located by the same path.
                        But more advisable solution is to use <link linkend="pod-ssh_inline_bash_script">inline bash script</link>.
                </para>
            </sect2>
            <sect2 id="pod-ssh_inline_bash_script"><title>Inline BASH script</title>
                <para>
                    User can define remote environment for PoD SSH worker nodes via a so called inline BASH script.
                    To define a script just use @bash_begin@ and @bash_end@ tags in your PoD SSH configuration file. For example:
<screen>
@bash_begin@    
    # GSI
    . /etc/profile.d/gsi.sh
    . rootlogin 527-06b-xrd
@bash_end@
    
r1, anar@lxg0527.gsi.de, -p24, /tmp/test, 4
# this is a comment
r2, user@lxi001.gsi.de,,/home/user/pod,16
125, user2@host, , /tmp/test,
</screen>
                    Everything what PoD find between those tags will be considered as an environment script and 
                    will be sourced on each worker node listed in that configuration file.
                </para>
                <para>
                    Bu using this feature, users are able to define different configuration files for different clusters,
                    each of which can define its own list of worker nodes and an environment script accordingly.
                </para>
                <para>
                    Be advised, if inline BASH script is found, then PoD will not use <link linkend="users_env_script">user_worker_env.sh</link>
                </para>
            </sect2>            
            
            <para>
                The <command>pod-ssh</command> utility exits 0 on success, and >0 if an error occurs.
            </para>
        </refsect1>
        <refsect1>
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>-h, --help</option></term>
                    <listitem>
                        <para>Show summary of options.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-v, --version</option></term>
                    <listitem>
                        <para>Version information.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-d, --debug</option></term>
                    <listitem>
                        <para>Show debug messages. This option enables a debug mode and helps in some cases to understand what is going wrong.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></term>
                    <listitem>
                        <para>PoD's ssh plug-in configuration file. A workers description file.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-e <replaceable>arg</replaceable>, --exec=<replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>Execute a local shell script on remote worker nodes</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-t <replaceable>arg</replaceable>, --threads=<replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>It defines a number of threads in pod-ssh's thread 
                            pool. Min value is 1, max value is (Core*2). 
                            Default: 5</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--submit</option></term>
                    <listitem>
                        <para>Submit PoD workers according to the entries in the configuration file.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--clean</option></term>
                    <listitem>
                        <para>
                            Clean all PoD workers according to the entries in the configuration file.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--status</option></term>
                    <listitem>
                        <para>Request status of PoD workers listed in the configuration file.</para>
                        <para>There are could be the following values of the status:</para>
                        <itemizedlist>
                            <listitem>RUN - PoD jobs is running,</listitem>
                            <listitem>DONE - PoD job is done, means PoD worker is not running on that worker node.
                                It could be also the case that worker failed to start,</listitem>
                            <listitem>CLEAN - PoD worker has been cleaned,</listitem>
                            <listitem>UNKNOWN - it is not possible to retrieve the status of that worker.</listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--logs</option></term>
                    <listitem>
                        <para>
                            Download all log files from the worker nodes. Can be 
                            used only together with the <option>--clean</option> option.
                            This command delivers all log files from the worker nodes. Logs are copied to
                            PoD log directory, the path to which is configurable via PoD user defaults.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
        <refsect1 id="pod-ssh_examples"><title>Examples</title>
            
            <example><title>Submit PoD jobs via SSH</title>
                <para>
<screen>
<command>pod-ssh <option>-c <replaceable>pod_ssh_config_file</replaceable></option> <option>--submit</option></command>
</screen>
                </para>
            </example>
            
            <example><title>Check the status of PoD jobs submitted via SSH</title>
                <para>
<screen>
<command>pod-ssh <option>--status</option></command>
</screen>
                    Check the amount of available PROOF workers:
<screen>
<command>pod-info <option>-n</option></command>
</screen>
    or
<screen>
<command>pod-info <option>-l</option></command>
</screen>                    
                </para>
                
            </example>
            
            <example><title>Clean PoD jobs submitted via SSH</title>
                <para>
<screen>
<command>pod-ssh <option>--clean</option></command>
</screen>
                    also you can clean and download all log files from the WNs
<screen>
<command>pod-ssh <option>--clean</option> <option>--logs</option></command>
</screen>
                </para>
                
            </example>
            
        </refsect1>
    </refentry>
    
    <!-- ......................................................................... -->
    <!-- pod-remote -->
    <!-- ......................................................................... -->
    
    <refentry id="pod-remote">
        <refentryinfo>
            <title>pod-remote</title>
            <date>2011-06-16</date>
            <productname>pod-remote vXXX</productname>
        </refentryinfo>
        <refmeta>
            <refentrytitle>pod-remote</refentrytitle>
            <manvolnum>1</manvolnum>
        </refmeta>
        <refnamediv>
            <refname>pod-remote</refname>
            <refpurpose>Using this command users can start/stop/restart remote PoD servers.
                The utility can also be used to execute arbitrary commands on remote PoD servers, such as PoD job submissions.</refpurpose>
        </refnamediv>
        <refsynopsisdiv>
            <cmdsynopsis>
                <command>pod-remote</command>
                <arg choice="plain"><synopfragmentref linkend="pod_remote_options_general">general options
                </synopfragmentref></arg>
                <arg choice="plain"><synopfragmentref linkend="pod_remote_options_connection">connection options
                </synopfragmentref></arg>
                <arg choice="plain"><synopfragmentref linkend="pod_remote_options_commands">commands
                </synopfragmentref></arg>
            </cmdsynopsis>
            <sbr/>
            <synopfragment id="pod_remote_options_general">
                <arg><option>-h, --help</option></arg>
                <arg><option>-v, --version</option></arg>
                <arg><option>-d, --debug</option></arg>
                <arg><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></arg>
            </synopfragment>
            <sbr/>
            <synopfragment id="pod_remote_options_connection" xreflabel="connection options">
                <arg><option>--remote <replaceable>arg</replaceable></option></arg>
                <arg><option>--ssh-opt <replaceable>arg</replaceable></option></arg>
                <arg><option>--ssh-open-domain <replaceable>arg</replaceable></option></arg>
                <arg><option>--env-local <replaceable>arg</replaceable></option></arg>
                <arg><option>--env-remote <replaceable>arg</replaceable></option></arg>
            </synopfragment>
            <sbr/>
            <synopfragment id="pod_remote_options_commands">
                <group>
                    <arg><option>--start</option></arg>
                    <arg><option>--stop</option></arg>
                    <arg><option>--restart</option></arg>
                    <arg><option>--command <replaceable>cmd</replaceable></option></arg>
                </group>
            </synopfragment>
            
        </refsynopsisdiv>
        <refsect1>
            <title>Description</title>
            <para>
                In order to use <command>pod-remote</command> <ulink url="http://www.boost.org/">BOOST</ulink> 1.41.0 (or higher) is required.
            </para>
            <important><para>
                The current implementation requires users to have a public key access (password less) to destination remote hosts (PoD servers).
            </para></important>
            <para>
                The <command>pod-remote</command> command offers a possibility to fully control remote PoD servers.
                A PROOF cluster created using <command>pod-remote</command> is accessed via SSH tunnels, which are automatically
                managed by <command>pod-remote</command>.
            </para>
            <para>
                Using <command>pod-remote</command> it is possible to start/restart/stop remote PoD servers.
                It is also possible to submit PoD jobs from remote PoD servers in order to set remote PROOF clusters up.
            </para>
            <para>
                Most importantly,
                <command>pod-remote</command> automatically creates and handles SSH tunnels for remote PoD servers,
                so that these servers can be used only via SSH connection - outside of a firewall. Tunnels stay alive until remote server is
                alive or you restart/stop pod-remote. The pod-remote command creates a background daemon, which regularly checks the status
                of the remote PoD server and manages tunnels.
                Another important feature of <command>pod-remote</command> is its integration into PoD, see <xref linkend="pod-remote_examples"/>.
            </para>
            <para>
                The <command>pod-remote</command> command remembers all <xref linkend="pod_remote_options_connection"/> values and next time you want to use <command>pod-remote</command>
                with the same server, you can omit these arguments and just call: <command>pod-remote <option>--start<replaceable>/stop/restart</replaceable></option></command>
                without <option>--remote</option> and <option>--env</option>. The command will always use the latest given settings.
                If you want to change the server, just provide new arguments values.
            </para>
            <para>
                The <command>pod-remote</command> utility exits 0 on success, and >0 if an error occurs.
            </para>
        </refsect1>
        <refsect1 id="pod-remote_options">
            <title>Options</title>
            <variablelist>
                <varlistentry>
                    <term><option>-h, --help</option></term>
                    <listitem>
                        <para>Produce help message.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-v, --version</option></term>
                    <listitem>
                        <para>Version information.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-d, --debug</option></term>
                    <listitem>
                        <para>Show debug messages. This option enables a debug mode and helps in some cases to understand what is going wrong.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>-c <replaceable>file</replaceable>, --config=<replaceable>file</replaceable></option></term>
                    <listitem>
                        <para>Specify an options file with the pod-remote command line options.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--remote <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>A connection string including a remote PoD location. For example: loginname@serverhostname:/PoD/location/pathname</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--ssh-opt <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>If needed, users can provide additional SSH options,
                            which will be used by <command>pod-remote</command> in all SSH communications.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--ssh-open-domain <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para> The name of a third party machine open to the outside world and from which direct
                            connections to the server are possible.
                            The optional argument, can be used when PoD server machine is not directly accessible from outside via SSH.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--env-local <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>A full path to a local environment script, which will be executed on the remote-end
                            before PoD starts the server. This is needed in order to get working environment on the remote host before PoD server can be started.
                            In most of the case you would need to source proper ROOT environment.
                            You can, of course, also set some other env. variables in the script, if needed.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--env-remote <replaceable>arg</replaceable></option></term>
                    <listitem>
                        <para>The same as <option>--env-local</option>, but the script is located on the remote machine and will be sourced there.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--start</option></term>
                    <listitem>
                        <para>Start remote PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--stop</option></term>
                    <listitem>
                        <para>Stop remote PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--restart</option></term>
                    <listitem>
                        <para>Restart remote PoD server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><option>--command</option></term>
                    <listitem>
                        <para>Execute arbitrary commands.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
        <refsect1 id="pod-remote_examples"><title>Examples</title>
            
            <example><title>Using remote PoD server</title>
                <para>
                    Let's say, I have two machines A and B.
                </para>
<literallayout>
A - is my laptop, for example.
B - is a machine (host: lxg0527) standing somewhere at my work place.
    From this machine I can submit jobs to my batch system (LSF, for example) 
    or use it as a server for PoD SSH plug-in.
</literallayout>
                <para>
                    On both machines I have PoD installed.
                </para>
                <para>
                    All the following commands I issue from my laptop (machine A).
                </para>
                <para>
                    Start the remote PoD server:
<screen>
<command>pod-remote <option>--start</option> \
    <option>--remote <replaceable>manafov@lxg0527.gsi.de:/home/manafov/3.6/</replaceable></option> \
    <option>--env-local</option> <replaceable>../GSI_env_5_27.sh</replaceable></command>
</screen>
                    The command above starts a remote PoD server on the host <systemitem class="fqdomainname">lxg0527.gsi.de</systemitem>
                    under the user <systemitem class="username">manafov</systemitem> and uses PoD installed in the <filename class="directory">/misc/manafov/PoD/3.5.75.gbecd4</filename> directory.
                    To initialize the proper environment on the remote host the <filename>../GSI_env_5_27.sh</filename> script is used.
                    <para>
                        If everything is OK and remote server is started, <command>pod-remote</command> will create and manage special SSH tunnels from machine A to B.
                        So, the whole PoD communication and PROOF requests will go via these tunnels.
                    </para>
                    <para>
                        To set our remote PROOF cluster up, now we need to submit
                        PoD jobs from the remote Server (in case of RMS plug-ins):
<screen>
<command>pod-remote <option>--command <replaceable>"pod-submit -r lsf -n 50 -q my_lsf_queue"</replaceable></option></command>
</screen>
                        or in case of the SSH plug-in
<screen>
<command>pod-remote <option>--command <replaceable>"pod-ssh -c --submit"</replaceable></option></command>
</screen>
                        
                        Using <option>--command</option>, you can execute any command vie SSH on the remote server.
                    </para>
                    <para>
                        Now, you can just use <xref linkend="pod-info"/> as usual, as if everything would run locally:
<screen>
<command>pod-info <option>-s</option></command>
<command>pod-info <option>-c</option></command>
<command>pod-info <option>-n</option></command>
...
</screen>
                        The <command>pod-info</command> automatically detects that there is a pod-remote-managed server
                        and will gather the information directly from it via the SSH tunnels.
                        It means, of course, that to connect from your local machine
                        to your remote PoD/PROOF cluster you need just to use:
<programlisting>
<code language="cpp">TProof::Open(gSystem->GetFromPipe("<command>pod-info <option>-c</option></command>"));</code>
</programlisting>
                    </para>
                    To stop the remote PoD server use:
<screen>
<command>pod-remote <option>--stop</option></command>
</screen>
                    To start the same server again use the following command.
                    Note missing <option>--remote</option>. You don't need it.
                    The command remembers your last valid settings.
<screen>
<command>pod-remote <option>--start</option></command>
</screen>
                    To restart the server:
<screen>
<command>pod-remote <option>--restart</option></command>
</screen>
                </para>
            </example>
        </refsect1>
    </refentry>
</chapter>

