# -*- python -*-
# ex: set syntax=python:

#************************************************************************
#
# master.cfg
# buildmaster config file
# Anar Manafov A.Manafov@gsi.de
# 
#
#        version number:    $LastChangedRevision$
#        created by:        Anar Manafov
#                           2006-02-01
#        last changed by:   $LastChangedBy$ $LastChangedDate$
#
#        Copyright (c) 2006 GSI, Scientific Computing devision. All rights reserved.
#*************************************************************************

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory

PASSWORD = file('/Users/anar/.passwd_buildbot', 'rb').readlines()[0].strip()

repo_url = "https://github.com/AnarManafov/PoD.git";

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}
#----------------------------------------------------------------------
####### BUILDSLAVES
#----------------------------------------------------------------------
# the set of allowable buildslaves.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("SL6_32", PASSWORD),
               BuildSlave("SL6_64", PASSWORD),
               BuildSlave("MacOSX_PoD_WN_pkg", PASSWORD),
	       BuildSlave("MacOSX_clang", PASSWORD)]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989
#----------------------------------------------------------------------
####### CHANGESOURCES
#----------------------------------------------------------------------
# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

# changes are comming from GitRepository/PROOFonDemand/PoDWebsite.git/hooks/git_buildbot.py
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()
#----------------------------------------------------------------------
####### BUILDERS
#----------------------------------------------------------------------
builders = []

from buildbot.process import factory
from buildbot.steps import shell, source
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Compile, Configure
from buildbot.steps.transfer import FileUpload, FileDownload

#s = factory.s
#----------------------------------------------------------------------
# ---> Custom Build steps
#----------------------------------------------------------------------
class ReleaseTarball(ShellCommand):
    def start(self):
        self.setCommand("chmod go+xr *.tar.gz; scp -o StrictHostKeyChecking=no -o PasswordAuthentication=no -p *.tar.gz podwww@lxi001:/u/podwww/web-docs/releases/pod/nightly")
        self.description=["release tarball"]
        self.haltOnFailure=True
        ShellCommand.start(self)

class CMakeMakeSourcePkg(ShellCommand):
    def start(self):
        self.setCommand("make package_source")
        self.description=["build src package"]
        self.haltOnFailure=True
        ShellCommand.start(self)


# Configure SDK 10.5:
# Way #1 (for Mac OS X  10.7)
#    - get SDK from xcode_3.2.6_and_ios_sdk_4.3.dmg
#    - install SDK
#    - make symbolic links for the following directories: 
#	sudo ln -s i686-apple-darwin9 i686-apple-darwin12
#	sudo ln -s powerpc-apple-darwin9 powerpc-apple-darwin12
#	sudo ln -s x86_64-apple-darwin9 x86_64-apple-darwin12
#
# in the /Users/anar/Development/SDKs/MacOSX10.5.sdk/usr/include/c++/4.2.1  directory
# BTW, if the 4.2.1 directory is missing there, just link from the 4.0.0 dir.
#
# Way #2 (OS X 10.8) 
# copy SDK to /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.5.sd
# copy content of /Users/anar/Development/SDKs/MacOSX10.5.sdk/usr/include/c++/4.0.0/i686-apple-darwin9/bits to /Users/anar/Development/SDKs/MacOSX10.5.sdk/usr/include/c++/4.0.0/bits 
#
#
# Boost build options (for boost 1.47):
# ./b2 --prefix=/Users/anar/Development/boost --layout=versioned toolset=darwin  macosx-version=10.5 macosx-version-min=10.5 architecture=x86 threading=multi link=static,shared address-model=32_64 -j24 release install
# also in darwin.jam
# need to change install_name:
# -install_name "/Users/anar/Development/boost/lib/$(<:B)$(<:S)"
#
# and
#
# help it to find SDKs
# local rule init-available-sdk-versions ( condition * : root ? )
#{
#    # root ?= /Users/anar/Development ;
#    # local sdks-root = $(root)/SDKs ;
#    
#    #local sdks-root = /Users/anar/Development/SDKs ;
#    local sdks-root = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs ;
#
#

#env_osx_boost_for10_5 = {
#         'BOOST_ROOT':'/Users/anar/Development/boost',
#         'BOOST_INCLUDEDIR':'/Users/anar/Development/boost/include',
#         'BOOST_LIBRARYDIR':'/Users/anar/Development/boost/lib'
#}

#----------------------------------------------------------------------
# ---> Building PoD
#----------------------------------------------------------------------

f_PoD = factory.BuildFactory()
f_PoD.addStep(Git(mode='full', method='clobber', submodules=True,  
                  repourl=repo_url,
                  haltOnFailure=True))

f_PoD.addStep(ShellCommand(command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

#f_PoD.addStep(ShellCommand, command="git submodule update --init --recursive; mkdir build",
#                  description=["git submodule"],
#                  haltOnFailure=1)

f_PoD.addStep(ShellCommand (command="mkdir build; cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/POD_INSTALL -C ../BuildSetup.cmake ..",
	          workdir="build/build",        
		  description=["configure"],
                  haltOnFailure=1))

f_PoD.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

#f_PoD.addStep(ShellCommand (command="make",
#                  workdir="build/documentation/src/",
#                  description=["build docz"],
#                  haltOnFailure=1))

f_PoD.addStep(ShellCommand (command="make install",
		  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_PoD.addStep(ShellCommand (command="./run_test.sh .",
                  workdir="/tmp/POD_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_PoD.addStep(ShellCommand (command="rm -rf /tmp/POD_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building PoD_full
#----------------------------------------------------------------------
f_PoD_full = factory.BuildFactory()
f_PoD_full.addStep(Git(mode='full', method='clobber', submodules=True,  
                       repourl=repo_url,
                       haltOnFailure=True))

f_PoD_full.addStep(ShellCommand (command="mkdir build",
                  description=["mkdir build"],
                  haltOnFailure=1))

#f_PoD_full.addStep(ShellCommand (command="git submodule update --init --recursive; mkdir build",
#                  description=["git submodule"],
#                  haltOnFailure=1))

f_PoD_full.addStep(ShellCommand (command="cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX:PATH=/tmp/POD_INSTALL -C ../BuildSetup.cmake ..",
                  workdir="build/build",        
                  description=["configure"],
                  haltOnFailure=1))

f_PoD_full.addStep(Compile(command=["make", "-j2"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

f_PoD_full.addStep(ShellCommand (command="make",
                  workdir="build/documentation/src/",
                  description=["build docz"],
                  haltOnFailure=1))

f_PoD_full.addStep(ShellCommand (command="make install",
                  workdir="build/build",
                  description=["test install"],
                  haltOnFailure=1))

f_PoD_full.addStep(ShellCommand(
                    command="chmod -R go+xr documentation/html_help; scp -o StrictHostKeyChecking=no -o PasswordAuthentication=no -r -p documentation/html_help/* podwww@lxi001:/u/podwww/web-docs/doc/nightly/",
                    description=["release docz"],
                    haltOnFailure=1))

f_PoD_full.addStep(ShellCommand (command="./run_test.sh .",
                  workdir="/tmp/POD_INSTALL/tests",
                  description=["run tests"],
                  haltOnFailure=1))

f_PoD_full.addStep(CMakeMakeSourcePkg(workdir="build/build"))

f_PoD_full.addStep(ReleaseTarball(workdir="build/build"))

f_PoD_full.addStep(ShellCommand (command="rm -rf /tmp/POD_INSTALL",
                  description=["cleaning"],
                  haltOnFailure=1))

#----------------------------------------------------------------------
# ---> Building PoD WN packages
#----------------------------------------------------------------------
f_PoD_wn_pkg = factory.BuildFactory()
f_PoD_wn_pkg.addStep(Git(mode='full', method='clobber', submodules=True,
                     repourl=repo_url,
                     haltOnFailure=True))

f_PoD_wn_pkg.addStep(ShellCommand (command="cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.5 -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.5.sdk  -DCMAKE_OSX_ARCHITECTURES=\"i386;x86_64\" -DBUILD_TESTS=ON -DBoost_COMPILER=\"-xgcc42\" -DBoost_DEBUG=1 -C ../BuildSetup.cmake ..",
                  workdir="build/build",        
                  description=["configure"],
                  haltOnFailure=1))

f_PoD_wn_pkg.addStep(Compile(command=["make", "wn_bin_upload"],
		   flunkOnWarnings=1,
                   haltOnFailure=1,
                   workdir="build/build"))

#----------------------------------------------------------------------
# ---> Building PoDWebsite
#----------------------------------------------------------------------
f_PoDWebsite = factory.BuildFactory()
f_PoDWebsite.addStep(Git(repourl='ssh://anar@demac012.gsi.de//Users/anar/GitRepository/PROOFonDemand/PoDWebsite',
                     haltOnFailure=True))

f_PoDWebsite.addStep(ShellCommand (command="make clean-all",
                     description=["clean"],
                     haltOnFailure=1))

f_PoDWebsite.addStep(Compile(command=["make"],
		   flunkOnWarnings=1,
                   haltOnFailure=1))

f_PoDWebsite.addStep(ShellCommand (command="chmod -R go+xr html_out; make sync",
                     description=["publish"],
                     haltOnFailure=1))
#----------------------------------------------------------------------
# -------------------------------------------------------------------
from buildbot.config import BuilderConfig

c['builders'] = [
                 BuilderConfig(name="PoD-Wn-Pkg-SL6-32", slavename="SL6_32", factory=f_PoD_wn_pkg),
                 BuilderConfig(name="PoD-Wn-Pkg-SL6-64", slavename="SL6_64", factory=f_PoD_wn_pkg),
                 BuilderConfig(name="PoD-Wn-Pkg-MacOSX10", slavename="MacOSX_PoD_WN_pkg", factory=f_PoD_wn_pkg),
                 #BuilderConfig(name="PoD-Fedora13-64-gcc4.4.4", slavename="Fedora_N1", factory=f_PoD),
                 #BuilderConfig(name="PoD-SL5-64-gcc4.1.2", slavename="SL5_N1", factory=f_PoD),
                 #BuilderConfig(name="PoD-Ubuntu12-32-gcc4.6.3", slavename="Ubuntu_32b", factory=f_PoD),
                 BuilderConfig(name="PoD-MacOSX-clang_trunk", slavename="MacOSX_clang", factory=f_PoD)
                 #BuilderConfig(name="PoD-MacOSX10.6.4-64-gcc4.2.1-full", slavename="MacOSX_N1", factory=f_PoD_full),
                 #BuilderConfig(name="PoDWebsite", slavename="Fedora_N1", factory=f_PoDWebsite),
]

#----------------------------------------------------------------------
####### STATUS TARGETS
#----------------------------------------------------------------------
c['status'] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
auth = (HTPasswdAuth('/Users/anar/Development/buildbot/master/.htpasswd'))

authz = Authz(auth=auth, 
              forceBuild='auth',
              stopBuild='auth')

c['status'].append(WebStatus(http_port=22000, authz=authz))
#c['status'].append(WebStatus(22000, None, True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="anar@localhost",
                                     extraRecipients=["Anar.Manafov@gmail.com"],
                                     sendToInterestedUsers=False,
				     mode="failing"))
#----------------------------------------------------------------------
####### DEBUGGING OPTIONS
#----------------------------------------------------------------------
# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

#----------------------------------------------------------------------
####### SCHEDULERS
#----------------------------------------------------------------------
# configure the Schedulers
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.basic import Dependent
from buildbot.schedulers.forcesched import ForceScheduler
# ------------> PoD <----------------
sch_wn_pkg = Nightly(name="sch_wn_pkg",
                     hour=1, minute=0,
                     branch='master',
                     builderNames=["PoD-Wn-Pkg-SL6-32", "PoD-Wn-Pkg-SL6-64", "PoD-Wn-Pkg-MacOSX10"])

#nightly = Dependent(name="nightly",
#                    upstream=sch_wn_pkg,
#                    builderNames=["PoD-Fedora13-64-gcc4.4.4", "PoD-SL5-64-gcc4.1.2", "PoD-Ubuntu12-32-gcc4.6.3"])

# this is so-far an experiment build
# we don't include it to the "Dependent" build
nightly2 = Nightly(name="nightly2",
                  hour=2, minute=0,
                  branch='master',
                  builderNames=["PoD-MacOSX-clang_trunk"])


#full_build = Dependent(name="full_build",
 #                      upstream=nightly,
 #                      builderNames=["PoD-MacOSX10.6.4-64-gcc4.2.1-full"])

#c['schedulers'] = [sch_wn_pkg, nightly, nightly2, full_build]

c['schedulers'] = [nightly2]


c['schedulers'].append(ForceScheduler(
                        name="force",
                        builderNames=["PoD-MacOSX-clang_trunk", "PoD-Wn-Pkg-SL6-32",  "PoD-Wn-Pkg-SL6-64", "PoD-Wn-Pkg-MacOSX10"]))

#c['schedulers'].append(ForceScheduler(
#                        name="force",
#                        builderNames=["PoD-Wn-Pkg-SL4-32", "PoD-Wn-Pkg-SL4-64", "PoD-Wn-Pkg-MacOSX10","PoD-Fedora13-64-gcc4.4.4", "PoD-SL5-64-gcc4.1.2", "PoD-Ubuntu12-32-gcc4.6.3","PoD-MacOSX10.6.4-64-clang_trunk", "PoD-MacOSX10.6.4-64-gcc4.2.1-full" ]))

# ------------> PoDWebsite <----------------
from buildbot.schedulers.basic import SingleBranchScheduler

#test_schedule = SingleBranchScheduler(name="PoDWebsite", branch="master", treeStableTimer=0, builderNames=["PoDWebsite"])
#c['schedulers'].append(test_schedule)
#----------------------------------------------------------------------
####### PROJECT IDENTITY
#----------------------------------------------------------------------
c['projectName'] = "PROOF on Demand"
c['projectURL'] = "http://pod.gsi.de"
c['buildbotURL'] = "http://demac012.gsi.de:22000/"
