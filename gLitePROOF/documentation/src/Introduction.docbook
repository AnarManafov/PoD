<!-- 
Introduction 
-->
	<chapter id="Introduction">
		<title>Introduction</title>
		<chapterinfo>
    		<releaseinfo>$Revision$</releaseinfo>
  	 		<pubdate>$Date$</pubdate>
  			<publisher><publishername>$LastChangedBy$</publishername></publisher>
   	</chapterinfo>
   	<sect1 id="PROOF-on-Demand">
      <title>PROOF on Demand</title>
    	<para>
    	<application>PROOF on Demand (PoD)</application> â€“ a specially designed solution to provide a PROOF cluster on demand.
    	It is developed at GSI (Darmstadt, Germany) in terms of a D-Grid project and aims to implement a PROOF distributed
    	data analysis on Grid and batch clusters.
    	</para>
    	<para>
    	<application>POD</application> provides a plug-in system, which helps to use it with different job submission machinaries.
    	Current implementation of POD ships a gLite plug-in (for gLite Grid) and LSF plug-in (for LSF batch system). 
    	The gLite plug-in uses <ulink url="https://subversion.gsi.de/trac/dgrid/wiki/GAW">glite-api-wrapper library</ulink>
    	(<acronym>GAW</acronym>) to perform gLite job submission and other Grid-related procedures.
    	</para>
    	<para>
		<itemizedlist>
			<title><application>POD</application> consists of the following main components:</title>
  			<listitem>
    			<para>
    			<guilabel>PROOFAgent</guilabel> &mdash; a lightweight, standalone C++ application.
    			Acts as a multifunctional proxy client/server and helps to use proof/xrootd on the
    			remote worker nodes behind a firewall. Also PROOFAgent has a number of additional
    			useful functionality which help to start, process, and control PROOF interactive analysis.
    			Its default configuration file is provided with the PODs distribution.
    			</para>
  			</listitem>
  		  	<listitem>
    			<para>
                <guilabel>PAConsole</guilabel> &mdash; a standalone C++ application, provides a GUI and aims
                to simplify the usage of PROOFAgent and POD configuration files.
                PAConsole implements a plug-in system, which helps to have different job managers and
                submit workers to a different Grid or batch systems.
                Currently POD provides gLite and LSF plug-ins.
    			</para>
  			</listitem>
  		  	<listitem>
    			<para>
    			<guilabel>xpd.cfg</guilabel> &mdash; a generic XROOTD configuration file (configures redirector
    			and remote workers).
    			</para>
  			</listitem>
  		  	<listitem>
    			<para>
    			<guilabel>Server_gLitePROOF.sh</guilabel> &mdash; a server side script. Helps to start/stop
    			services of POD. Could be used via command line or PAConsole GUI.
    			</para>
  			</listitem>
  		  	<listitem>
    			<para>
    			<guilabel>gLitePROOF.jdl</guilabel> &mdash; a JDL file, describes a generic, parametric Grid job,
    			which is submitted to gLite and aims to execute POD workers on Grid worker nodes.  
    			</para>
  			</listitem>
  			<listitem>
    			<para>
    			<guilabel>gLitePROOF.sh</guilabel> &mdash; a job script executed on remote machines.  
    			</para>
  			</listitem>
  			<listitem>
    			<para>
    			<guilabel>PoD_env.sh</guilabel> &mdash; this script sets environment of POD and
    			should be sourced before a use of POD.  
    			</para>
			</listitem>
			  	<listitem>
    			<para>
    			<guilabel>Job.lsf</guilabel> &mdash; this is a default job script for LSF plug-in.  
    			</para>
			</listitem>
		</itemizedlist>
		</para>
		<para>
		<figure id="fig_POD" float="0">
			<title>A generic schema of POD with gLite plug-in</title>
			<screenshot><mediaobject>
			<imageobject>
			<imagedata fileref="gLite_PROOF.png" format="PNG"/>
			</imageobject>
			<textobject>
			<phrase>phrase</phrase>
			</textobject>
			</mediaobject></screenshot>
		</figure>
		</para>
		</sect1>
		<sect1 id="use_case">
      <title>Use case</title>
		<para>
		The following describes one of the main use case of POD (see <xref linkend="fig_POD"/>):
		<orderedlist>
  		<title>Set up PROOF on the Grid</title>
  			<listitem>
    			<para>Using PAConsole a user configures and starts PROOFAgent (PA)
    			server and XROOTD redirector.</para>
  			</listitem>
  			<listitem>
    			<para>PA connects to XROOTD's proof port and waits for PA clients.</para>
			</listitem>
			<listitem>
				<para>Using PAConsole the user submits POD parametric job to the Grid.</para>
			</listitem>
			<listitem>
				<para>When the job arrives to a remote worker node it configures the environment
				and starts all needed services including XROOTD worker and PA client.</para>
			</listitem>
			<listitem>
				<para>Then PA client communicates with PA server, exchanges environment data and
				initiates a network tunnel.</para>
			</listitem>
			<listitem>
				<para>When PA server accepts a client connection, the client is ready to be a PROOF
				worker node.</para>
			</listitem>
			<listitem>
				<para>When PA server detects good connections with its clients, this information is
				immediately reflected by PAConsole.</para>
			</listitem>
			<listitem>
				<para>When all workers are connected or when the user is satisfied with the number of
				connected workers, the PROOF analysis can be processed like on a local batch farm.</para>
			</listitem>
			<listitem>
				<para>PA can manage disconnects, the user can restart the ROOT session without resubmitting
				POD Grid jobs.</para>
			</listitem>			
			</orderedlist>
		</para>
		</sect1>
	</chapter>
