#! /bin/bash
##/************************************************************************/
##/*! \file install
##  *//*
##
##         version number:     $LastChangedRevision$
##         created by:         Anar Manafov
##                             2008-02-06
##         last changed by:    $LastChangedBy$ $LastChangedDate$
##
##         Copyright (c) 2008 GSI GridTeam. All rights reserved.
##*************************************************************************/
VERSION=2.0.7

###
############ Vars ######################
# Users may change these variables
###
INSTALL_PATH=/tmp/test/gLitePROOFpackage

XRD_EXPORT_DIR=$INSTALL_PATH/test
PROOF_PORT=21093


GAW_PKG=glite-api-wrapper-3.2.0
GAW_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly/
GAW_OPTIONS="--prefix=$INSTALL_PATH --enable-tests=no"

PROOFAgent_PKG=proofagent-1.0.5
PROOFAgent_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly/
PROOFAgent_OPTIONS="--prefix=$INSTALL_PATH"

PAConsole_PKG=PAConsole-1.0.6-Source
PAConsole_LINK=http://www-linux.gsi.de/~manafov/D-Grid/Release/Nightly/
PAConsole_OPTIONS="-DCMAKE_INSTALL_PREFIX=$INSTALL_PATH"
# gLite
#export GLITE_LOCATION=
export XERCESC_LOCATION=$GLITE_LOCATION/../external/opt/xerces-c
export CLASSADS_LOCATION=$GLITE_LOCATION/../classads
export BOOST_LOCATION=$GLITE_LOCATION/../external/usr/
export GRIDSITE_INSTALL_PATH=$GLITE_LOCATION/../external/usr/


APP_PATH=$INSTALL_PATH/app
TMP_PATH=$APP_PATH/tmp
########################################


###
############ Funstions ##################
###
CreateCFG()
{
    echo "---> INFO: Creating default cfg files..."
# generating ./gLitePROOF_ENV.sh
    cp -f template/gLitePROOF_ENV.sh.template ./gLitePROOF_ENV.sh
    eval sed -i 's%_G_WRK_DIR%$INSTALL_PATH%g' ./gLitePROOF_ENV.sh

# Using eval to force variable substitution
# changing _G_MASTER_HOSTNAME to a host name (FQDN) of the xrootd master:
    MASTER_HOST=`hostname -f`
# generating etc/xpd.cf
    cp -f template/xpd.cf.template etc/xpd.cf
    eval sed -i 's%_G_MASTER_HOSTNAME%$MASTER_HOST%g' etc/xpd.cf
    # populating the tmp dir.
    _TMP_DIR=`mktemp -d /tmp/gLitePROOF_XXXXXXXXXX`
    eval sed -i 's%_G_SERVER_TMP_DIR%$_TMP_DIR%g' etc/xpd.cf
    eval sed -i 's%_G_PROOF_PORT%$PROOF_PORT%g' etc/xpd.cf
    eval sed -i 's%_G_XRD_EXPORT_DIR%$XRD_EXPORT_DIR%g' etc/xpd.cf

# generating etc/proofagent.cfg.xml
    cp -f template/proofagent.cfg.xml.template etc/proofagent.cfg.xml
    eval sed -i 's%_G_MASTER_HOSTNAME%$MASTER_HOST%g' etc/proofagent.cfg.xml
    eval sed -i 's%_G_PROOF_PORT%$PROOF_PORT%g' etc/proofagent.cfg.xml

# generating etc/Job.lsf
    cp -f template/Job.lsf.template etc/Job.lsf
    eval sed -i 's%_G_WRK_DIR%$INSTALL_PATH%g' etc/Job.lsf

# generate test/simple_test0.C
    cp -f template/simple_test0.C.template test/simple_test0.C
    eval sed -i 's%_G_MASTER_HOSTNAME%$MASTER_HOST%g' test/simple_test0.C
    eval sed -i 's%_G_PROOF_PORT%$PROOF_PORT%g' test/simple_test0.C
    eval sed -i 's%_G_XRD_EXPORT_DIR%$XRD_EXPORT_DIR%g' test/simple_test0.C    
    
# linking datafile for tests
    ln -s $INSTALL_PATH/test/dstarmb.root $INSTALL_PATH/test/dstarmb1.root
# creating a log dir
    mkdir -p log

    return 0
}

_GetModule() #parameters: $1 - package name; $2 - URL
{
    wget --tries=2 --directory-prefix=$TMP_PATH $2/$1.tar.gz  || return 1
    tar -C $APP_PATH -xzf $TMP_PATH/$1.tar.gz || return 1
}

InstallGAW()
{
    _GetModule $GAW_PKG $GAW_LINK

    pushd $APP_PATH/$GAW_PKG || return 1
    ./configure $GAW_OPTIONS || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
     
    # source GAW's config - other modules need it
    GAW_ENV=$INSTALL_PATH/bin/gaw_env.sh
    if [ -e $GAW_ENV ]; then
	echo "Sourcing GAW's env.: "$GAW_ENV
    	. $GAW_ENV
    else
	# TODO: msg me!
	return 1
    fi
  
    echo
    echo "---> INFO: GAW has been installed."
    return 0
}

InstallPROOFAgent()
{
    _GetModule $PROOFAgent_PKG $PROOFAgent_LINK

    pushd $APP_PATH/$PROOFAgent_PKG || return 1
    ./configure $PROOFAgent_OPTIONS || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
       
    echo
    echo "---> INFO: PROOFAgent has been installed."
    return 0
}

InstallPAConsole()
{
    _GetModule $PAConsole_PKG $PAConsole_LINK
 
    pushd  $APP_PATH/$PAConsole_PKG || return 1
    cmake $PAConsole_OPTIONS -C BuildSetup.cmake . || { popd; return 1; }
    gmake || { popd; return 1; }
    gmake install || { popd; return 1; }
    popd
    
    echo
    echo "---> INFO: PAConsole has been installed."
    return 0
}

InstallApps()
{
    mkdir -p $TMP_PATH
    
    InstallGAW
    GAW_RET_VAL=$?
    echo
    echo
    if [ "X$GAW_RET_VAL" != "X0" ]; then
	echo "---> WARNING: Can't install gLite API Wrapper (GAW) library."
	echo "---> WARNING: Do you want to use gLite plug-in?"
	echo "---> WARNING: Without GAW there can be no gLite plug-in for PAConsole installed."
	echo "---> WARNING: Please fix GAW configuration options (in the install script) and resolve missing dependencies, if you still want to use gLite plug-in for PAConsole."
	echo
	echo "Press any key to continue, or Ctrl+C to abort..."
	read -s -n 1	
    fi

    InstallPROOFAgent || return 1
    InstallPAConsole || return 1

    return 0
}






####### Main
echo "--------------------"
echo "gLitePROOF v."$VERSION
echo "--------------------"
echo

InstallApps

RET_VAL=$?
echo
echo
if [ "X$RET_VAL" = "X0" ]; then
  echo "---> INFO: All gLitePROOF modules have been successfully installed."
else
  echo "---> ERROR: Failed to install gLitePROOF modules."
fi

if [[ -d $TMP_PATH ]]; then
    echo "---> INFO: deleting temporary files..."
    rm -rf $TMP_PATH
fi

if [ "X$RET_VAL" != "X0" ]; then
    exit 1;
fi

CreateCFG || { echo "---> Error: can't create cfg files."; exit 1; }

echo "Installation successfully done."
exit 0
